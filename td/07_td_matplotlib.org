#+TITLE:  Librairie =matplotlib=
#+AUTHOR: Xavier Garrido
#+DATE:   02/03/2017
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{6}

* Interfaces graphiques

** Production de\nbsp^{11}C
Reprendre l'exercice sur la variation du nombre de noyaux de carbone 11 en
ajoutant à la représentation initiale, trois /sliders/ respectivement $n_i$,
$T_{1/2}$ et $t_0$ et faire en sorte que la figure se reconstruise à chaque
nouvelle valeur de ces paramètres.

*** Correction                                                 :correction:

#+BEGIN_SRC python -n :tangle scripts/nc11_gui.py
  import numpy as np

  # Définition des constantes du problème
  ni  = 3e8   # noyaux/s
  T12 = 20.36 # min
  t0  = 3     # hours

  def n(t, ni=ni, t0=t0, T12=T12):
      T12 /= 60  # hours
      ni *= 3600 # noyaux/h
      l = np.log(2)/T12
      conds = [t <= t0, t > t0]
      funcs = [lambda t: ni/l*(1-np.exp(-l*t)),
               lambda t: ni/l*(1-np.exp(-l*t0))*np.exp(-l*(t-t0))]
      return np.piecewise(t, conds, funcs)

  t = np.linspace(0, 10, 1000) #hours

  import matplotlib.pyplot as plt
  fig, ax = plt.subplots()
  l, = plt.plot(t, n(t))
  plt.xlabel("temps [heures]")
  plt.ylabel(r"$n(^{11}\mathrm{C})$")

  # Définition des sous-figures où afficher les sliders
  axni  = plt.axes([0.25, 0.10, 0.65, 0.03])
  axt12 = plt.axes([0.25, 0.15, 0.65, 0.03])
  axt0  = plt.axes([0.25, 0.20, 0.65, 0.03])

  plt.subplots_adjust(bottom=0.35)

  from matplotlib.widgets import Slider
  sni = Slider(axni, r"$n_i [\times10^8]\mathrm{/s}$", 1, 10, valinit=ni/1e8)
  st12 = Slider(axt12, r"$T_{1/2}$ [min]", 1, 60, valinit=T12)
  st0 = Slider(axt0, r"$t_{0}$ [h]", 1, 10, valinit=t0)

  def update(val):
      nx = n(t, sni.val*1e8, st0.val, st12.val)
      l.set_ydata(nx)
      ax.set_ylim(ax.get_ylim()[0], 1.1*np.max(nx))
      fig.canvas.draw_idle()

  sni.on_changed(update)
  st12.on_changed(update)
  st0.on_changed(update)

  plt.show()
#+END_SRC


[[file:figures/carbon11_gui.png]]

[[https://owncloud.lal.in2p3.fr/index.php/s/ONZpE9tdRLvKCPJ][Télécharger la solution]]

** Distribution spatiale de photons émis depuis une source en mouvement
On peut montrer (/cf./ TD Relativité) que la distribution de photons émis depuis une source en
mouvement relativiste s'écrit
#+BEGIN_SRC latex
  \begin{align*}
    \frac{\text{d} N}{N_0}&=f(\theta)\cdot\frac{\text{d}\Omega}{4\pi}\\
    &=\frac{1-\beta^2}{(1-\beta\cos\theta)^2}\cdot\frac{\text{d}\Omega}{4\pi}
  \end{align*}
#+END_SRC
où $\theta$ est l'angle zénithal et $\text{d}\Omega=\sin\theta\text{d}\theta\text{d}\phi$ dans le
référentiel statique de l'observateur. Représenter la fonction $f(\theta)$ en représentation polaire
puis ajouter un /slider/ permettant de faire varier la vitesse $\beta=\frac{V}{c}$ de la source par
rapport à l'observateur.

*** Correction                                                 :correction:

#+BEGIN_SRC python -n :tangle scripts/photons_gui.py
  import numpy as np
  def f(theta, beta):
        return (1-beta**2)/(1-beta*np.cos(theta))**2

  r = np.arange(0, 1, 0.0001)
  theta = 2*np.pi*r

  import matplotlib.pyplot as plt
  fig, ax = plt.subplots(subplot_kw={"projection": "polar"})
  plt.subplots_adjust(bottom=0.25)

  l, = ax.plot(theta, f(theta, beta=0))
  ax.set_rticks([])

  def update(val):
      y = f(theta, beta=val)
      l.set_ydata(y)
      ax.set_ylim(0, 1.1*np.max(y))
      fig.canvas.draw_idle()

  # Définition des sous-figures où afficher les sliders
  axbeta = plt.axes([0.15, 0.10, 0.75, 0.03])
  from matplotlib.widgets import Slider
  sbeta = Slider(axbeta, r"$\beta$", 0, 0.999999, valinit=0)
  sbeta.on_changed(update)

  plt.show()
#+END_SRC

[[file:figures/photons_gui.png]]

[[https://owncloud.lal.in2p3.fr/index.php/s/cdm3kCLv1qPLKak][Télécharger la solution]]

** COMMENT Bon anniversaire
*** Correction                                                 :correction:
#+BEGIN_SRC ipython :session :results raw drawer :tangle scripts/bon_anniversaire.py
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np

  fig, ax = plt.subplots(figsize=(6,8))
  plt.subplots_adjust(bottom=0.25, left=0.25)

  distance = 4 # a.l

  def trajectory(beta=4/5):
      x = [0, distance, 0]
      y = [0, distance/beta, 2*distance/beta]
      return x, y

  x, y = trajectory(beta=4/5)
  l, = plt.plot(x, y, "-o")

  plt.plot([0, 2*distance], [0, 2*distance], "--", color="C3")
  plt.xlim(0, 2*distance)
  plt.ylim(0, 10)
  plt.xlabel(r"$x^1$ = distance [a.l.]")
  plt.ylabel(r"$x^0 = ct$ [années]")
  plt.text(distance*1.75, distance*1.80, "cône de lumière", color="C3", rotation=45, ha="center", va="center")
  plt.fill_between([0, 2*distance], [0, 2*distance], color="lightgray")
  plt.yticks(np.arange(11))
  plt.grid()

  def update(val):
      x, y = trajectory(val)
      l.set_ydata(y)
      fig.canvas.draw_idle()

  # Définition des sous-figures où afficher les sliders
  axbeta = plt.axes([0.25, 0.10, 0.65, 0.03])
  from matplotlib.widgets import Slider
  sbeta = Slider(axbeta, r"$\beta$", 0, 1, valinit=4/5)
  sbeta.on_changed(update)

  plt.show()
#+END_SRC

#+RESULTS:
:results:
[[file:./obipy-resources/1526BnV.svg]]
:end:

* Higgs en \gamma\gamma

Le 4 juillet 2012, les expériences ATLAS et CMS, menées au Grand collisionneur
de hadrons (LHC), ont annoncé qu’elles avaient toutes deux observé une nouvelle
particule dont la masse se situait dans la région des 126 GeV. Cette particule
présente des caractéristiques compatibles avec celles du boson de Higgs prédit
par le Modèle standard. Le boson de Higgs, tel que le décrit ce modèle, est la
manifestation la plus simple du mécanisme de Brout-Englert-Higgs qui permet,
notamment, d'expliquer théoriquement la masse des particules élémentaires.

Le 8 octobre 2013, le prix Nobel de physique a été attribué conjointement à
François Englert et à Peter Higgs « pour la découverte théorique d’un mécanisme
contribuant à notre compréhension de l’origine de la masse des particules
subatomiques, une théorie qui s’est confirmée récemment, lorsque les expériences
ATLAS et CMS, menées au Grand collisionneur de hadrons du CERN, ont découvert la
particule prédite. »

Pour détecter le boson de Higgs, les physiciens des expériences ATLAS et CMS
étudient notamment la désintégration de cette particule en une paire de photons
\gamma. On peut alors mesurer le nombre d'événements comprenant uniquement deux
photons et le comparer à un modèle dans lequel le boson de Higgs n'existe
pas. Une différence significative entre données et modèle signe alors
l'existence d'une nouvelle particule.

Les données [[https://owncloud.lal.in2p3.fr/index.php/s/42zx4JmrXmn47MA][=higgs-gg.csv=]] représentent les résultats obtenus par l'expérience
ATLAS au cours des années 2011/2012. Dans ce fichier, figure en première colonne
l'énergie des deux photons exprimée en GeV, le nombre de paire di-photons
observées en deuxième colonne et l'incertitude sur ce nombre en troisième
colonne. Dans cet exercice, on cherche à reproduire la figure ci-dessous publiée
dans [[https://arxiv.org/abs/1207.7214][/Phys. Rev. Letter B716/ (2012)]] et annonçant la découverte d'une nouvelle
particule.

[[file:figures/higgs_gg.pdf]]

- Représenter le nombre d'événements di-photons en fonction de l'énergie. On
  oubliera pas d'intituler les axes de cette figure afin d'y faire figurer toute
  information pertinente.

- Représenter le modèle suivant
  #+BEGIN_SRC latex
    \begin{align*}
      y_\text{modèle} = -1.668\,10^{-2}x^3 + 7.697x^2 + -1208.9x + 6.527\,10^{4}
    \end{align*}
  #+END_SRC
  Calculer la valeur du $\chi^2$ où

  #+BEGIN_SRC latex
    \begin{align*}
      \chi^2=\sum_i\frac{\left(y_i-y_\text{modèle}(x_i)\right)^2}{\sigma_{y_i}^2}
    \end{align*}
  #+END_SRC

  et la diviser par le nombre de degrés de liberté qui correspond au nombre de
  points expérimentaux moins le nombre de paramètres du modèle. Pour
  information, une valeur de \chi^{2}/ndof voisine de 1 démontre l'adéquation
  statistique entre données et modèle.

- Représenter dans une sous figure, la différence entre le modèle et les données
  puis normaliser cette différence par rapport à l'erreur sur chacun des points
  expérimentaux. Une découverte en physique des particules est établie lorsque
  le nombre d'écart-type \sigma entre données expérimentales et modèle est
  supérieur à 5. Isoler graphiquement les points expérimentaux pour lesquels la
  déviation est supérieure à 3\sigma. Déterminer enfin la valeur maximale de
  cette déviation en nombre de \sigma et affirmer ou non avoir découvert le
  boson de Higgs. Le cas échéant, donner la masse de cette particule.

** Correction                                                   :correction:

#+BEGIN_SRC python :tangle scripts/higgs.py :results output
  import numpy as np
  data = np.loadtxt("./data/higgs-gg.csv", delimiter=",")

  x, y, yerr = data.T

  import matplotlib.pyplot as plt

  grid = plt.GridSpec(4, 1, hspace=0, wspace=0)

  main = plt.subplot(grid[0:3], xticklabels=[])
  main.errorbar(x, y, yerr=yerr, fmt=".k", label="ATLAS data")
  main.set_ylabel(r"Nombre d'événements $H\to\gamma\gamma$")

  # "Theoritical model" = 4th order polynomial
  def model(x, parameters=[6.527e4, -1208.9, 7.697, -1.668e-2]):
      y = 0.0
      for i, p in enumerate(parameters):
          y += p*np.power(x, i)
      return y

  xmodel = np.linspace(105, 160, 100)
  main.plot(xmodel, model(xmodel), "-r", label="modèle polynomial")

  # Plot deviation
  sub = plt.subplot(grid[3])
  dev = (y - model(x))/yerr
  sub.errorbar(x, dev, fmt=".k")
  sub.set_ylabel(r"$\frac{y-y_\mathrm{modèle}}{\sigma}$ [$\sigma$]")
  sub.set_xlabel(r"$m_{\gamma\gamma}$ [MeV]")

  # Calculate chi2/ndf and add it to legend
  chi2n = np.sum(dev**2)/(len(dev)-4)
  main.plot([], [], linestyle="None", label=r"$\chi^2/$ndf = {0:.2f}".format(chi2n))
  main.legend()

  mask = (dev > 3)
  sub.scatter(x[mask], dev[mask], edgecolors="red", c="none", s=100)

  print("Masse du boson de Higgs = {} GeV".format(x[mask][0]))

  # Fit with a 4th order polynomial
  parameters = np.polyfit(x, y, 3)
  fit = np.poly1d(parameters)
  print("Best parameters : " + str(parameters))

  plt.show()
#+END_SRC

#+RESULTS:
: Masse du boson de Higgs = 126.0 GeV
: Best parameters : [ -1.66824264e-02   7.69724379e+00  -1.20891766e+03   6.52746509e+04]

[[file:figures/mpl_higgs_gg.pdf]]

[[https://owncloud.lal.in2p3.fr/index.php/s/0u7iKiSksnGQrGJ][Télécharger la solution]]

* À la découverte des planètes extrasolaires

Le fichier [[https://owncloud.lal.in2p3.fr/index.php/s/VhgDvSljdzftZ2c][=planets.csv=]] contient des informations relatives aux planètes
extrasolaires depuis la première découverte en 1989. Le document fait notamment
référence aux techniques de découverte de ces objets (première colonne) et
recense les informations glanées par leurs découvreurs : période orbitale en
jours (colonne 3), masse de la planète (colonne 4), distance à l'objet en années
lumières (colonne 5) et année de découverte (colonne 6). Dans cet exercice, on
utilisera le module =pandas= plus à même de traiter des fichiers de données mélant
données numériques et alphanumériques. L'installation de ce module se fait /via/
=pip install pandas= et on le chargera dans un script python ou dans
l'interpréteur =ipython= par le biais de
#+BEGIN_SRC python
  import pandas as pd
#+END_SRC
On s'aidera finalement du code ci-dessous pour charger le fichier en mémoire
puis exploiter chacune des différentes colonnes
#+BEGIN_SRC python
  data = pd.read_csv("planets.csv")

  methods = data["method"].values
  years = data["year"].values
#+END_SRC

La "clé" utilisée par =pandas= (dans l'exemple ci-dessus =method= et =year=) se réfère
à la première ligne du fichier qui indique le nom des champs.

- Représenter le nombre de planètes découvertes en fonction du temps. Modifier
  l'abscisse de la figure de telle sorte à indiquer chaque année et s'assurer
  que chaque donnée est bien centrée par rapport à l'année. Typiquement la
  "barre" dénombrant le nombre de planètes découvertes en 2015 doit être centrée
  sur l'abscisse 2015.

- Représenter cette même information tout en indiquant la technique utilisée
  pour la découverte. /Indication/ : on pourra se servir de la fonction =histogram=
  de =numpy=.

- Dénombrer le nombre total de découverte par méthodes puis, pour les deux
  principales, représenter la variation de la période orbitale en fonction de la
  distance à la planète. Finalement, ajouter à la figure précédente, deux
  sous-figures, présentant les distributions de période orbitale et de distance
  pour chacune des deux méthodes. Les trois représentations doivent figurer sur
  la même figure et conclure quant aux caractéristiques des objets extrasolaires
  mis en évidence par chacune des deux méthodes.

** Correction                                                   :correction:

*** COMMENT Avec =numpy=
#+BEGIN_SRC python
  import numpy as np

  methods = np.genfromtxt("data/planets.csv", delimiter=",", usecols=0)
  data = np.genfromtxt("data/planets.csv", delimiter=",", usecols=(1,2,3,4,5))

  years = data[:, 4]

  import matplotlib.pyplot as plt

  plt.figure()
  plt.hist(years[years == 2005], align="left")

  plt.figure()
  plt.hist(years, align="left", range=(1990, 2015), bins=25)
  plt.ylabel("nombre de planètes extrasolaires découvertes")
  plt.xticks(np.arange(1990, 2015), fontsize=10, rotation=90)
  plt.grid()

  plt.figure()
  for idx, method in enumerate(np.unique(methods)):
        h, _ = np.histogram(years[methods == method], range=(1990, 2015), bins=25)

  plt.show()
#+END_SRC

*** Avec =pandas=

#+BEGIN_SRC python :results output :tangle scripts/planets.py
  import pandas as pd

  data = pd.read_csv("data/planets.csv")

  years = data["year"].values
  methods = data["method"].values
  orbital_period = data["orbital_period"].values
  distance = data["distance"].values

  import numpy as np
  import matplotlib.pyplot as plt

  plt.figure()
  plt.hist(years[years == 2005], align="left")

  # Total distribution of planets per year
  plt.figure()
  plt.hist(years, align="left", range=(1990, 2015), bins=25)
  plt.ylabel("nombre de planètes extrasolaires")
  plt.xticks(np.arange(1990, 2015), fontsize=10, rotation=90)
  plt.grid()

  # Distribution of planets discovered per year and per method
  plt.figure()
  for idx, method in enumerate(np.unique(methods)):
      h, bins = np.histogram(years[methods == method], range=(1990, 2015), bins=25)
      plt.bar(bins[:-1], h, label=method)
      plt.legend()

  # Orbital period versus distance
  plt.figure(figsize=(6, 6))
  grid = plt.GridSpec(4, 4, hspace=0, wspace=0)
  main = plt.subplot(grid[:-1, 1:], xticklabels=[], yticklabels=[],
                     xscale="log", yscale="log")

  selected_methods = ["Radial Velocity", "Transit"]
  for method in selected_methods:
      mask = (methods == method)
      x , y = distance[mask], orbital_period[mask]
      nonan = (~np.isnan(x) & ~np.isnan(y))
      main.plot(x[nonan], y[nonan], "o", alpha=0.5, label=method)
  main.legend(ncol=2, bbox_to_anchor=(0.5, 1.05), loc="center")

  xlims = main.get_xlim()
  x_hist = plt.subplot(grid[-1, 1:], yticklabels=[],
                       xlim=xlims, xscale="log", xlabel=r"distance [light years]")
  x_hist.invert_yaxis()

  ylims = main.get_ylim()
  y_hist = plt.subplot(grid[:-1, 0], xticklabels=[],
                       ylim=ylims, yscale="log", ylabel=r"orbital period [days]")
  y_hist.invert_xaxis()

  kwargs = dict(alpha=0.5, histtype="stepfilled")
  for method in selected_methods:
      mask = (methods == method)
      x , y = distance[mask], orbital_period[mask]
      nonan = (~np.isnan(x) & ~np.isnan(y))
      x_hist.hist(x[nonan], orientation="vertical", **kwargs,
                  bins=np.logspace(np.log10(xlims[0]), np.log10(xlims[1]), 50))
      y_hist.hist(y[nonan], orientation="horizontal", **kwargs,
                  bins=np.logspace(np.log10(ylims[0]), np.log10(ylims[1]), 50))

  plt.show()
#+END_SRC

[[file:figures/planet_hist.pdf]]

[[file:figures/planet_methods.pdf]]

[[file:figures/planet_period.pdf]]

[[https://owncloud.lal.in2p3.fr/index.php/s/fFGtGWHVKr1T9Qu][Télécharger la solution]]
* COMMENT Degrade Planck temperature map

- Resolution de COBE 7°, WMAP 33 fois meilleure et Planck 3 fois meilleure que WMAP

* COMMENT Pie charts and polar charts for disk usage

http://matplotlib.org/examples/pylab_examples/polar_demo.html

Le rayon est proportionnel à la taille, l'angle devant être 2\pi / nombre de
dossier

* COMMENT Git commit

- récupérer les commit de matplotlib sour la forme

| Nom | jour | nombre de modif|

- Représenter la distribution du nombre de commit par utilisateur en triant les
  résultats

- Représenter le nombre de commit en fonction du temps

* COMMENT Twitter parlementaires et parainages présidentielles

https://github.com/regardscitoyens/twitter-parlementaires

https://presidentielle2017.conseil-constitutionnel.fr/les-parrainages/tous-les-parrainages/
