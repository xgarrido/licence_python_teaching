#+TITLE:  Modules et POO
#+AUTHOR: Xavier Garrido
#+DATE:   08/02/2017
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{3}

#+BEGIN_REMARK
On n'oubliera pas de charger l'environnement virtuel défini lors de la première
séance à l'aide de la commande =source=.
#+END_REMARK

* Modularité (suite)

- Modifier le fichier =euler_project.py=, créé lors du précédent TD, de telle
  sorte à ce que l'interaction avec l'utilisateur (saisie du numéro de projet à
  afficher) ne soit effective que lorsque le fichier est exécuté en tant que
  script.

- Faire en sorte que le fichier =euler_project.py= puisse être charger en tant que
  module dans un script =test_euler_project.py= qui se chargera de lancer et donc
  de tester chaque fonction sans intervention de l'utilisateur.

- Déplacer ce module/script dans un répertoire référencé par la variable
  =PYTHONPATH=

** Correction                                                   :correction:

- On ajoutera à la fin du fichier  [[https://owncloud.lal.in2p3.fr/index.php/s/IzfFFXrKuTeQMeF][=euler_project.py=]], les lignes suivantes

  #+BEGIN_SRC python
    projects = {1 : euler001, 2 : euler002, 6 : euler006, 16 : euler016, 25 : euler025}

    if __name__ == "__main__":
        i = 0
        while True:
            i = int(input("Project number ? "))
            if i not in projects.keys():
                print("Project n°{} not solved yet".format(i))
                continue
            print(projects[i]())
            break
  #+END_SRC

- [[https://owncloud.lal.in2p3.fr/index.php/s/VnyLgCXkTo5kS0r][Fichier test]]
  #+BEGIN_SRC python :tangle scripts/test_euler_project.py
    import euler_project as ep

    # To generate random integer values
    from numpy.random import randint

    for key, fcn in ep.projects.items():
        n = randint(1000)
        print("Testing Euler project n°{} with value n={}".format(key, n))
        print("-> Solution = {}".format(str(fcn(n))))
  #+END_SRC

* Objets =python=

1) Classe =Particle=
   1) Dans un fichier =particle.py=, créer une classe/objet =Particle= qui prendra
      pour attributs, le nom de la particule, sa masse exprimée en eV et sa
      charge électrique. La méthode d'initialisation =__init__= permettra de
      fournir des valeurs par défaut à ces trois attributs tout en autorisant
      l'utilisateur à initialiser ces attributs.

   2) Ajouter une méthode =dump= permettant d'afficher les valeurs des attributs
      et concevoir un programme =test_particle.py= qui créera diverses instances
      de type =Particle= en les stockant dans une liste puis affichera chacune de
      ces instances.

   3) Renommer la méthode =dump= en =__str__= et faire en sorte qu'elle retourne une
      chaîne de caractères. Tester la fonction =print= sur un objet de type
      =Particle=.

2) Classe =Point=
   1) Dans un fichier =Point.py=, créer une classe =Point= dont les attributs seront
      les valeurs des coordonnées cartésiennes $x$ et $y$. Surcharger la méthode
      =__str__= afin d'afficher ces deux informations. Pour tester l'ensemble, on
      créera un programme test dans lequel diverses instances de type =Point=
      seront générées.

   2) Définir une nouvelle méthode appelé =__add__= qui retournera un nouvel objet
      de type =Point=, résultat de la somme de deux instances de type =Point= .

   3) Afficher le résultat de la somme de deux objets =Point= /via/ la fonction
      =print=.

   4) Créer une nouvelle classe =Vector2D= dont les attributs seront deux objets
      de type =Point=. Définir une méthode de =Vector2D= qui retournera la norme du
      vecteur.

   5) Définir une méthode de =Vector2D= qui permettra d'afficher les coordonnées
      des deux points constituant le vecteur et que l'on pourra utiliser par le
      biais de la fonction =print=.

** Correction                                                   :correction:

1) Ci-dessous la classe [[https://owncloud.lal.in2p3.fr/index.php/s/J7vGM9WVJgWMqUO][=Particle=]]

   #+BEGIN_SRC python :tangle scripts/particle.py
     class Particle:
         def __init__(self, name=None, mass=None, charge=None):
             self.name = name
             self.mass = mass
             self.charge = charge
         def __str__(self):
             return "Particle name {}, mass = {} eV and electric charge = {} C".format(self.name,
                                                                                       self.mass,
                                                                                       self.charge)
   #+END_SRC

   et son [[https://owncloud.lal.in2p3.fr/index.php/s/n9dD83qJdEi9rtg][fichier test]]

   #+BEGIN_SRC python :tangle scripts/test_particle.py
     import particle

     # Create an empty list of particles
     particles = []
     particles.append(particle.Particle("electron", 511e3, -1.6e-19))
     particles.append(particle.Particle("muon", 155e6, -1.6e-19))
     particles.append(particle.Particle("proton", 939e6, +1.6e-19))

     for p in particles:
         print(p)
   #+END_SRC

2) Classe [[https://owncloud.lal.in2p3.fr/index.php/s/VnyLgCXkTo5kS0r][=Point=]]

   #+BEGIN_SRC python :tangle scripts/point.py
     class Point:
          def __init__(self, x=None, y=None):
               self.x = x
               self.y = y
          def  __str__(self):
               return "(x, y) = ({}, {})".format(self.x, self.y)
          def __add__(self, other):
               return Point(self.x+other.x, self.y+other.y)
   #+END_SRC

   Classe [[https://owncloud.lal.in2p3.fr/index.php/s/95lVALxaaisaXEv][=Vector2D=]]

   #+BEGIN_SRC python :tangle scripts/vector2d.py
     class Vector2D:
         def __init__(self, point1=None, point2=None):
             self.point1 = point1
             self.point2 = point2
         def norm(self):
             from math import hypot
             return hypot(self.point1.x - self.point2.x,
                          self.point1.y - self.point2.y)
         def __str__(self):
             return "point1 : {}, point2 : {}".format(self.point1, self.point2)
   #+END_SRC

   [[https://owncloud.lal.in2p3.fr/index.php/s/T8vcv18yCRozS3y][Fichier test]] des deux précédentes classes

   #+BEGIN_SRC python :tangle scripts/test_vector2d.py
     import point as p
     point1 = p.Point(3,4)
     point2 = p.Point(2,7)
     point3 = point1 + point2
     print(point1)
     print(point2)
     print(point3)

     import vector2d as v2d
     vector = v2d.Vector2D(point1, point2)
     print(vector)
     print("norm = " + str(vector.norm()))
   #+END_SRC
