#+TITLE:  Librairie =numpy=
#+AUTHOR: Xavier Garrido
#+DATE:   21/02/2017
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{4}

#+COMMENT: https://www.machinelearningplus.com/101-numpy-exercises-python/

* Création/manipulation de tableaux

- Créer un vecteur contenant les nombres entiers de 0 à 9 puis n'afficher que les valeurs paires de
  ce vecteur. Remplacer ensuite ces valeurs paires par -1.

- Créer un vecteur de 20 valeurs flottantes réparties uniformément entre 1 et 50. À l'aide de la
  fonction =where= de =numpy=, remplacer les valeurs inférieures à 10 par 10 et celle supérieure à 30
  par 30.

- Créer les matrices suivantes en respectant le type et en 3 opérations maximum
  #+BEGIN_SRC latex
    \begin{align*}
      \begin{bmatrix}
        1&1&1&1\\
        1&1&1&1\\
        1&1&1&2\\
        1&6&1&1\\
      \end{bmatrix}&\quad
      \begin{bmatrix}
        0.& 0.& 0.& 0.& 0.\\
        2.& 0.& 0.& 0.& 0.\\
        0.& 3.& 0.& 0.& 0.\\
        0.& 0.& 4.& 0.& 0.\\
        0.& 0.& 0.& 5.& 0.\\
        0.& 0.& 0.& 0.& 6.\\
      \end{bmatrix}
    \end{align*}
  #+END_SRC
  Dans le second cas, on pourra s'aider de la méthode =diag=

- En utilisant la méthode =tile=, reproduire la matrice suivante à l'aide d'une seule commande
  #+BEGIN_SRC latex
    \begin{align*}
      \begin{bmatrix}
        4& 3& 4& 3& 4& 3\\
        2& 1& 2& 1& 2& 1\\
        4& 3& 4& 3& 4& 3\\
        2& 1& 2& 1& 2& 1\\
      \end{bmatrix}
    \end{align*}
  #+END_SRC

** Correction                                                   :correction:
:PROPERTIES:
:HEADER-ARGS: :tangle scripts/matrix.py
:END:

-
  #+BEGIN_SRC python
    import numpy as np
    v = np.arange(0, 10)
    v[v%2 == 1] = -1
  #+END_SRC

-
  #+BEGIN_SRC ipython
    import numpy as np
    v = np.random.uniform(1, 50, 20)
    v = np.where(v < 10, 10, np.where(v > 30, 30, v))
  #+END_SRC

-
  #+BEGIN_SRC python
    import numpy as np
    M = np.ones((4,4))
    M[2,3] = 2
    M[3,1] = 6
    print(M)
  #+END_SRC

  #+BEGIN_SRC python
    import numpy as np
    M = np.diag([2, 3, 4, 5, 6], k=-1)
    M = M[:, :5]
    print(M)
  #+END_SRC

-
  #+BEGIN_SRC python
    import numpy as np
    M = np.tile([[4,3], [2, 1]], (2, 3))
    print(M)
  #+END_SRC

[[https://owncloud.lal.in2p3.fr/public.php?service=files&t=ca57174417a91df160a81971c2c57db1][Télécharger les solutions]]

* Fonctions universelles

- Créer un tableau à une dimension contenant 1 million de valeurs aléatoires comprises entre 1 et
  100

- Créer une fonction =inverse= qui retournera un second tableau résultat de l'opération d'inversion du
  premier tableau

- À l'aide de la fonction intégrée =%timeit= de l'interpréteur =ipython=, estimer le temps moyen
  nécessaire à l'exécution de la fonction =inverse=

- Estimer ce même temps d'exécution, en utilisant l'opérateur division

** Correction                                                   :correction:

#+BEGIN_SRC python
  In [1]: def inverse(value):
     ...:     output = np.empty(len(values))
     ...:     for i in range(len(values)):
     ...:         output[i] = 1./values[i]
     ...:     return output
     ...:

  In [2]: v = np.random.randint(1, 100, 1000000)

  In [3]: %timeit inverse(v)
  1 loop, best of 3: 2.46 s per loop

  In [4]: %timeit 1./v
  100 loops, best of 3: 6.45 ms per loop
#+END_SRC

* Sale temps sur Seattle

- Télécharger le fichier [[https://owncloud.lal.in2p3.fr/index.php/s/HlLjdrv0C9lLYl9][=seattle2014.csv=]] qui contient pour chaque jour de l'année 2014 (colonne
  1), la hauteur des précipitations exprimé en dixième de millimètres (colonne 2) ainsi que les
  températures maximale (colonne 3) et minimale (colonne 4), exprimées en dixième de degrés Celsius,
  à Seattle.

- Charger l'ensemble des données dans un tableau =numpy= en prenant bien garde au caractère délimitant
  chaque champ puis, après avoir converti la hauteur des précipitations en centimètres et les
  températures en degré Celsius, calculer les valeurs suivantes sur chacune des données du fichier
  (hauteur des précipitations, $T_\text{min}$ et $T_\text{max}$) :
  1) moyenne, médiane et écart type
  2) valeurs minimale et maximale
  3) les quantiles à 25% et 75%

- Afficher les valeurs ci-dessus pour la période estivale

- Calculer la hauteur totale d'eau tombée à Seattle en 2014

- Dénombrer le nombre total de jours dans l'année pendant lesquels il a plu à Seattle et déterminer
  combien de ces jours étaient pairs

- Représenter la distribution de la hauteur des précipitations à l'aide de la méthode =hist= de
  =matplotlib.pyplot=

** Correction                                                   :correction:

#+BEGIN_SRC python -n :tangle scripts/seattle1.py
  import numpy as np

  def print_report(prcp, Tmin, Tmax):

      print("Hauteur des précipitations:")
      print("  valeur moyenne = {} cm".format(np.mean(prcp)))
      print("  valeur médiane = {} cm".format(np.median(prcp)))
      print("      écart type = {} cm".format(np.std(prcp)))
      print("     valeur min. = {} cm".format(np.min(prcp)))
      print("     valeur max. = {} cm".format(np.max(prcp)))
      print("  quantile à 25% = {} cm".format(np.percentile(prcp, 25)))
      print("  quantile à 75% = {} cm".format(np.percentile(prcp, 75)))
      print("\n")

      print("Température minimale:")
      print("  valeur moyenne = {} °C".format(np.mean(Tmin)))
      print("  valeur médiane = {} °C".format(np.median(Tmin)))
      print("      écart type = {} °C".format(np.std(Tmin)))
      print("     valeur min. = {} °C".format(np.min(Tmin)))
      print("     valeur max. = {} °C".format(np.max(Tmin)))
      print("  quantile à 25% = {} °C".format(np.percentile(Tmin, 25)))
      print("  quantile à 75% = {} °C".format(np.percentile(Tmin, 75)))
      print("\n")

      print("Température maximale:")
      print("  valeur moyenne = {} °C".format(np.mean(Tmax)))
      print("  valeur médiane = {} °C".format(np.median(Tmax)))
      print("      écart type = {} °C".format(np.std(Tmax)))
      print("     valeur min. = {} °C".format(np.min(Tmax)))
      print("     valeur max. = {} °C".format(np.max(Tmax)))
      print("  quantile à 25% = {} °C".format(np.percentile(Tmax, 25)))
      print("  quantile à 75% = {} °C".format(np.percentile(Tmax, 75)))
      print("\n")

  data = np.loadtxt("./data/seattle2014.csv", delimiter=",")

  day = data[:,0]
  prcp = data[:,1]/100 # cm
  Tmax = data[:,2]/10  # °C
  Tmin = data[:,3]/10  # °C

  print("* Valeurs annuelles")
  print_report(prcp, Tmin, Tmax)

  print("* Valeurs estivales")
  summer = (day > 20140401) & (day < 20140930)
  print_report(prcp[summer], Tmin[summer], Tmax[summer])

  print("Hauteur totale d'eau en 2014 : {} cm".format(np.sum(prcp)))
  print("Nombre de jours avec pluie : {}".format(np.sum(prcp > 0)))
  print("Nombre de jours pairs avec pluie : {}".format(np.sum((prcp > 0) & (day % 2 == 0))))

  import matplotlib.pyplot as plt
  plt.hist(prcp, 40)

  plt.show()
#+END_SRC

[[file:figures/seattle2014_prcp.pdf]]

[[https://owncloud.lal.in2p3.fr/index.php/s/agKz0cf6LZjujX5][Télécharger la solution]]
