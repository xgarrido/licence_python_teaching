#+TITLE:  Variables, structure conditionnelle et autres boucles
#+AUTHOR: Xavier Garrido
#+DATE:   22/01/2017
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide
#+LATEX_HEADER_EXTRA: \usepackage[normalem]{ulem}

* @@beamer:\only<1>{Déclaration de variables}\only<2->{\sout{Déclaration} Initialisation de variables}@@

- En raison du *typage dynamique*, Python permet de déclarer des variables sans en
  préciser le type (entier, nombre flottant, ...)

#+BEAMER: \pause
#+BEGIN_SRC python
  In [1]: i = 2

  In [2]: x = 10.5

  In [3]: s = "Une noisette, j'la casse entre mes fesses tu vois... JCVD"
#+END_SRC

#+BEAMER:\pause
#+BEGIN_SRC python
  In [4]: %whos
  Variable   Type     Data/Info
  -----------------------------
  i          int      2
  s          str      Une noisette, j'la casse <...>es fesses tu vois... JCVD
  x          float    10.5
#+END_SRC


#+BEGIN_COMMENT
/cf./ cours
http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-1-Introduction-to-Python-Programming.ipynb#Assignment

Affectation multiples /cf./ cours http://python.developpez.com/cours/apprendre-python3/?page=page_4#L4-G
#+END_COMMENT

* Type fondamentaux

#+ATTR_BEAMER: :overlay +-
- La fonction *=type=* permet d'accéder au type d'une variable

- *Nombre entier*
  #+BEGIN_SRC python
    In [1]: i = 2
    In [2]: type(i)
    Out[2]: int
  #+END_SRC

- *Nombre flottant*
  #+BEGIN_SRC python
    In [1]: x = 10.5
    In [2]: type(x)
    Out[2]: float
  #+END_SRC

* Type fondamentaux

#+ATTR_BEAMER: :overlay +-
- *Nombre complexe*
  #+BEGIN_SRC python
    In [1]: z = 1.5 + 0.5j
    In [2]: type(z)
    Out[2]: complex
    In [3]: z.real
    Out[3]: 1.5
    In [4]: z.imag
    Out[4]: 0.5
  #+END_SRC

#+BEGIN_REMARK
On notera que le nombre complexe $i$ est noté =j= ou =J= en Python
  #+BEGIN_SRC python
    In [1]: j = 5

    In [2]: 2 + 5*j
    Out[2]: 27

    In [3]: 2 + 5j
    Out[3]: (2+5j)
  #+END_SRC
#+END_REMARK

* Type fondamentaux

- *Booléen*
  #+BEGIN_SRC python
    In [1]: b = 3 > 4
    In [2]: type(b)
    Out[2]: bool
    In [3]: b
    Out[3]: False
  #+END_SRC

* Conversion explicite

- Nombre entier \to nombre flottant
  #+BEGIN_SRC python
    In [1]: i = 2
    In [2]: i
    Out[2]: 2
    In [3]: x = float(i)
    In [4]: x
    Out[4]: 2.0
  #+END_SRC

#+BEAMER: \pause
- Nombre entier \to booléen
  #+BEGIN_SRC python
    In [1]: b = bool(i)
    In [2]: b
    Out[2]: True
  #+END_SRC

#+BEGIN_REMARK
Toute valeur différente de 0 est considérée comme vraie
#+END_REMARK

#+BEGIN_COMMENT
/cf./ cours
http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-1-Introduction-to-Python-Programming.ipynb#Type-casting
#+END_COMMENT

* Conversion explicite

- Nombre entier \to nombre complexe
  #+BEGIN_SRC python
    In [1]: z = complex(i)
    In [2]: z
    Out[2]: (2+0j)
  #+END_SRC

#+BEAMER: \pause
- Nombre complexe \to nombre flottant
  #+BEGIN_SRC python
    In [1]: z = 1.5 + 0.5j
    In [2]: x = float(z.imag)
    In [3]: x
    Out[3]: 0.5
  #+END_SRC

* Opérations & comparaisons

- Opérations arithmétiques =+=, =-=, =*=, =/=, =//= division entière, =**= puissance, =%= modulo
  #+BEGIN_SRC python
    In [1]: 1 + 2, 1 - 2, 1 * 2, 1 / 2
    Out[1]: (3, -1, 2, 0)

    In [2]: 1.0 + 2.0, 1.0 - 2.0, 1.0 * 2.0, 1.0 / 2.0
    Out[2]: (3.0, -1.0, 2.0, 0.5)

    In [3]: 2**2
    Out[3]: 4

    In [4]: 3.0 // 2.0
    Out[4]: 1.0

    In [5]: 3.0 % 2.0
    Out[5]: 1.0
  #+END_SRC

#+BEAMER: \pause
#+BEGIN_REMARK
En Python 2.X, la division entière pouvait se faire à l'aide de l'opérateur =/=
dès lors que des entiers étaient impliqués.

Python 3.X a introduit l'opérateur =//= pour lever toutes ambiguïtés.
#+END_REMARK

#+BEGIN_COMMENT
/cf./ cours
http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-1-Introduction-to-Python-Programming.ipynb#Operators-and-comparisons

Attention à la division dans Python 3.X
#+END_COMMENT

* Opérations & comparaisons

- Opérations arithmétiques (suite) :  =+==, =-==, =*==, =/==, =%==, =**==
  #+BEGIN_SRC python
    In [1]: x = 1.0
    In [2]: x = x + 1.5
    In [3]: x += 1.5

    In [4]: i = 0
    In [5]: i += 1
  #+END_SRC

#+BEAMER: \pause
#+BEGIN_REMARK
Contrairement au C/C++, les opérateurs =++= et =--= n'existent pas en Python.
#+END_REMARK

* Opérations & comparaisons

- Opérations booléennes : =and=, =or= et =not=
  #+BEGIN_SRC python
    In [1]: True and False
    Out[1]: False

    In [2]: not False
    Out[2]: True

    In [3]: True or False
    Out[3]: True
  #+END_SRC

* Opérations & comparaisons

- Opérateur de comparaison : =>=, =<=, =>==, =<==, ====, =!==
  #+BEGIN_SRC python
    In [1]: 2 > 1, 2 < 1
    Out[1]: (True, False)

    In [2]: 2 > 2, 2 < 2
    Out[2]: (False, False)

    In [3]: 2 == 2
    Out[3]: True

    In [4]: 2 != 2
    Out[4]: False
  #+END_SRC

* Affectation multiples et parallèles

- Python autorise *l'affectation simultanée* d'une même valeur à plusieurs
  variables
  #+BEGIN_SRC python
    In [1]: x = y = 1.0

    In [2]: x, y
    Out[2]: (1.0, 1.0)
  #+END_SRC

  #+BEAMER: \pause

- Python permet également *l'affectation en parallèle* de plusieurs variables
  #+BEGIN_SRC python
    In [1]: x, y = 1.0, 1.0

    In [2]: x, y
    Out[2]: (1.0, 1.0)
  #+END_SRC

* Application : échange de deux valeurs

  #+BEGIN_SRC python
    In [1]: x, y = 1.0, 2.0

    In [2]: x, y
    Out[2]: (1.0, 2.0)

    In [3]: x, y = y, x

    In [4]: x, y
    Out[4]: (2.0, 1.0)
  #+END_SRC

* Mot-clés réservés

- Parmi les bonnes pratiques de programmation, le nom des variables doit être le
  plus clair et le plus explicite possible pour le développeur comme pour un
  lecteur non averti

  #+BEGIN_SRC python
    In [1]: planck_constant = 6.626e-34 # J.s
    In [2]: pc = 6.626e-34              # J.s
    In [3]: energy = pc                 # WTF !?
  #+END_SRC

* Mot-clés réservés

- Toutefois, un certain nombre de mot-clés sont réservés au langage Python

  #+BEGIN_CENTER
  =and=, =as=, =assert=, =break=, =class=, =continue=, =def=, =del=, =elif=, =else=, =except=, =exec=,
  =finally=, =for=, =from=, =global=, =if=, =import=, =in=, =is=, *=lambda=*, =not=, =or=, =pass=,
  =print=, =raise=, =return=, =try=, =while=, =with=, *=yield=*
  #+END_CENTER

#+BEAMER: \pause

- Rien n'empêche en revanche, d'utiliser des noms de variables identiques à certaines fonctions du
  Python

  #+BEGIN_SRC python
    In [1]: type = 666
    In [2]: type(666)
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-2-7e2d10a8adcc> in <module>()
    ----> 1 type(666)

    TypeError: 'int' object is not callable
  #+END_SRC

* Intermède /geek/

#+ATTR_LATEX: :width 0.65\linewidth
[[file:figures/ballmer_peak.png]]

#+BEAMER:\scriptsize\hfill$^\dagger$
[[http://xkcd.com/323/][xkcd comic]]

* Structure conditionnelle

** =if= python
:PROPERTIES:
:BEAMER_COL: 0.5
:END:
#+BEGIN_SRC python
  In [1]: galette = True
     ...: neige = True
     ...:
     ...: if neige:
     ...:     print("Pas de galette !")
     ...: elif galette:
     ...:     print("Galette !")
     ...: else:
     ...:     print("Pas de neige, pas de galette")
#+END_SRC

** Description
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_BEAMER: :overlay +-
- utilisation des mot-clés *=if/elif/else=*
- la fin de chaque condition est matérialisée par *le caractère =:=*
- *l'indentation (4 espaces ou une tabulation) délimite le bloc de condition*
- dans =ipython=, appuyer sur =Entrée= deux fois pour exécuter le bloc

* COMMENT Structure conditionnelle

** =if= python
:PROPERTIES:
:BEAMER_COL: 0.5
:END:
#+BEGIN_SRC python
  In [1]: test1 = False
     ...: test2 = False
     ...:
     ...: if test1:
     ...:     print("test1 est True")
     ...:
     ...: elif test2:
     ...:     print("test2 est True")
     ...:
     ...: else:
     ...:     print("test1 & test2 sont False")
#+END_SRC

** =if= C/C++
:PROPERTIES:
:BEAMER_COL: 0.6
:END:
#+BEGIN_SRC C++
  bool test1 = false;
  bool test2 = false;

  if (test1)
    {
      cout << "test1 est True" << endl;
    }
   else if (test2)
     {
       cout << "test2 est True" << endl;
     }
   else
     {
       cout << "test1 & test2 sont False" << endl;
     }
#+END_SRC

* Structure conditionnelle

- Python offre la possibilité de former des /expressions/ dont l'évaluation est
  soumise à une condition

  #+BEGIN_SRC python
    In [1]: x = 2.0

    In [2]: y = x if x < 0 else x**2
    In [3]: y
    Out[3]: 4.0

    In [4]: print("y est positif" if y > 0 else "y est négatif")
    Out[4]: y est positif
  #+END_SRC

* Répétition conditionnelle

- Pour répéter un bloc d'instructions tant qu'une condition est réalisée, Python
  propose la clause *=while=*

- Suite de Syracuse
  #+BEGIN_SRC python
    In [3]: n = 27
    In [4]: while n != 1:
       ...:     if n % 2:
       ...:         n = 3*n+1
       ...:     else:
       ...:         n //= 2
       ...:     print(n, end=" ")
       ...:
    82 41 124 62 31 94 47 142 71 214 107 322 161 484 242 121 364 182 91 274 137 412 206 103
    310 155 466 233 700 350 175 526 263 790 395 1186 593 1780 890 445 1336 668 334 167 502
    251 754 377 1132 566 283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858
    2429 7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577 1732 866
    433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1
  #+END_SRC

* Boucles =for=

- Pour répéter un certain nombre de fois un bloc d'instructions, on utilisera la
  construction suivante
  #+BEGIN_SRC python
    for variable in objet:
        bloc de commandes
  #+END_SRC

#+BEAMER: \pause

- Exemple :
  #+BEGIN_SRC python
    In [1]: for c in "abcdef":
       ...:     print(c)
       ...:
       a
       b
       c
       d
       e
       f
  #+END_SRC

* Boucles =for=

- Autres exemples:
  #+BEGIN_SRC python
    In [1]: for i in range(4):
       ...:     print(i)
       ...:
       0
       1
       2
       3
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [1]: for i in range(-4, 4, 2):
       ...:     print(i)
       ...:
       -4
       -2
       0
       2
  #+END_SRC

* Instructions =break= & =continue=

- Pour quitter une boucle =for= en cours d'exécution, on utilisera l'instruction
  *=break=*
  #+BEGIN_SRC python
    In [1]: for i in range(-4,4,2):
       ...:     if i == 0:
       ...:         break
       ...:     print(i)
       ...:
    -4
    -2
  #+END_SRC

#+BEAMER: \pause

- S'il s'agit de passer outre le bloc d'instruction suivant, on utilisera
  l'instruction *=continue=*
  #+BEGIN_SRC python
    In [1]: for i in range(-4,4,2):
       ...:     if i == 0:
       ...:         continue
       ...:     print(i)
       ...:
    -4
    -2
    2
  #+END_SRC

* Instructions =break= & =continue=

- S'il s'agit de passer outre le bloc d'instruction suivant, on utilisera
  l'instruction *=continue=*
  #+BEGIN_SRC python
    In [1]: for i in range(-4,4,2):
       ...:     if i == 0:
       ...:         continue
       ...:     print(i)
       ...:
    -4
    -2
    2
  #+END_SRC

  #+BEGIN_REMARK
  L'instruction =continue= est particulièrement utile afin d'éviter une trop grande
  imbrication d'instructions =if= successives.
  #+END_REMARK
