#+TITLE:  _=numpy=_ : librairie pour le calcul scientifique
#+AUTHOR: Xavier Garrido
#+DATE:   15/02/2017
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* =numpy= ?

- Le module =numpy= est l'outil de base utilisé dans tous calculs scientifiques et
  donc numériques en Python

- =numpy= fournit en particulier des objets de type *vecteurs, matrices et plus
  généralement tableaux à $n$ dimensions*

- =numpy= facilite et *optimise[fn:e0eb780c73d6562]* les opérations de *stockage et
  de manipulation* des données *numériques* notamment lorsque la taille des
  tableaux devient importante \to /array oriented computing/

* Installation & importation de =numpy=

#+ATTR_BEAMER: :overlay +-
- Installation /via/ =pip=
  #+BEGIN_SRC shell-session
    @\prompt@ pip install numpy
  #+END_SRC

- Convention d'importation
  #+BEGIN_SRC python
    In [1]: import numpy as np
  #+END_SRC

* Documentation =numpy=

- Documentation de référence du module http://docs.scipy.org/

- Aide interactive
  #+BEGIN_SRC python
    In [1]: np.array?
         1 Docstring:
         2 array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)
         3
         4 Create an array.
         5 ...
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [2]: np.lookfor("create array")
         1 Search results for 'create array'
         2 ---------------------------------
         3 numpy.array
         4     Create an array.
         5 numpy.memmap
         6     Create a memory-map to an array stored in a *binary* file on disk.
  #+END_SRC

* Création de vecteurs, matrices

- À partir d'une liste de valeurs
  - Vecteur
    #+BEGIN_SRC python
      In [2]: v = np.array([0, 1, 2, 3])
      In [3]: v
      Out[3]: array([0, 1, 2, 3])
    #+END_SRC
    #+BEAMER: \pause

  - Matrice 2\times2
    #+BEGIN_SRC python
      In [4]: M = np.array([[0, 1], [2, 3]])
      In [5]: M
      Out[5]:
      array([[0, 1],
             [2, 3]])
    #+END_SRC

    #+BEAMER: \pause
    #+BEGIN_SRC python
      In [6]: type(v), type(M)
      Out[6]: (numpy.ndarray, numpy.ndarray)

      In [7]: v.ndim, M.ndim
      Out[7]: (1, 2)

      In [8]: v.shape, M.shape
      Out[8]: ((4,), (2, 2))
    #+END_SRC

* Pourquoi =numpy= ?

- Les objets de type =numpy.ndarray= \equiv à une liste Python (ou liste de
  listes)

- *Pourquoi ne pas simplement utiliser les listes Python pour les calculs au
  lieu de créer un nouveau type de tableau ?*

* Pourquoi =numpy= ?

Il existe plusieurs (très bonnes) raisons à cela:

#+ATTR_BEAMER: :overlay +-
- Les listes Python sont très générales (on parle également d'objet de haut
  niveau). *Elles peuvent contenir n'importe quel objet \to typage
  dynamique*. Elles ne supportent pas les opérations mathématiques.

- Les tableaux ou /array/ de =numpy= sont *statiquement typées et homogènes[fn:ea2b86f523276c9]*

  - Le type des éléments est déterminé lorsque le tableau est créé *\to plus de
    typage dynamique*
  - De même la taille du tableau est fixée à la création *\to stockage en
    mémoire optimisée*

- En raison du typage statique, les fonctions mathématiques telles que la
  multiplication et l'addition de matrices peuvent être mises en œuvre /via/ un
  langage compilé (C et Fortran)

#+BEGIN_COMMENT
So far the numpy.ndarray looks awefully much like a Python list (or nested
list). Why not simply use Python lists for computations instead of creating a
new array type?

There are several reasons:

- Python lists are very general. They can contain any kind of object. They are
  dynamically typed. They do not support mathematical functions such as matrix
  and dot multiplications, etc. Implementing such functions for Python lists
  would not be very efficient because of the dynamic typing.
- Numpy arrays are statically typed and homogeneous. The type of the elements is
  determined when the array is created.
- Numpy arrays are memory efficient.
- Because of the static typing, fast implementation of mathematical functions
  such as multiplication and addition of numpy arrays can be implemented in a
  compiled language (C and Fortran is used).

http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-2-Numpy.ipynb#From-lists

http://www.scipy-lectures.org/intro/numpy/array_object.html#numpy-arrays

#+END_COMMENT

* Pourquoi =numpy= ?

- Démonstration
  #+BEGIN_SRC python
    In [1]: %timeit [i**2 for i in range(1000)]
    1000 loops, best of 3: 403 us per loop
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [3]: a = np.arange(1000)
    In [4]: %timeit a**2
    100000 loops, best of 3: 12.7 us per loop
  #+END_SRC

* Création de tableau (suite)

#+ATTR_BEAMER: :overlay +-
- Le type de données numériques est défini à la création du tableau

- Vecteur d'entiers
  #+BEGIN_SRC python
    In [1]: v = np.array([0, 1, 2, 3])
    In [2]: v
    Out[2]: array([0, 1, 2, 3])

    In [3]: v.dtype
    Out[3]: dtype('int64')
  #+END_SRC

- Vecteur de nombres flottants
  #+BEGIN_SRC python
    In [1]: v = np.array([0., 1., 2., 3.])
    In [2]: v.dtype
    Out[2]: dtype('float64')
  #+END_SRC

- ou en forçant le type de données \footnotesize(=float=, =int=, =bool=, 16, 32, 64 bits)
  #+BEGIN_SRC python
    In [1]: v = np.array([0, 1, 2, 3], dtype=np.float)
    In [2]: v.dtype
    Out[2]: dtype('float64')
  #+END_SRC

* Création de tableau (suite)

Dans la pratique, les valeurs d'un tableau sont rarement saisies une par une

#+ATTR_BEAMER: :overlay +-
- Fonction =arange= \equiv =range=
  #+BEGIN_SRC python
    In [1]: np.arange(10)
    Out[1]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

    In [2]: np.arange(0, 10, 2)
    Out[2]: array([0, 2, 4, 6, 8])

    In [3]: np.arange(0, 1, step=0.1)
    Out[3]: array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
  #+END_SRC

- Fonctions =linspace/logspace=
  #+BEGIN_SRC python
    In [1]: np.linspace(0, 10, num=5)
    Out[1: array([  0. ,   2.5,   5. ,   7.5,  10. ])

    In [2]: np.logspace(0, 10, num=5)
    Out[2]:
    array([  1.00000000e+00,   3.16227766e+02,   1.00000000e+05,
             3.16227766e+07,   1.00000000e+10])
  #+END_SRC

* Création de tableau (suite)

#+ATTR_BEAMER: :overlay +-
- Vecteurs, matrices avec valeurs par défaut
  #+BEGIN_SRC python
    In [1]: np.zeros(10)
    Out[1]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

    In [2]: np.ones(shape=(3,3))
    Out[2]:
    array([[ 1.,  1.,  1.],
           [ 1.,  1.,  1.],
           [ 1.,  1.,  1.]])

    In [3]: np.full((3,3), 666, dtype=np.int)
    Out[3]:
    array([[666, 666, 666],
           [666, 666, 666],
           [666, 666, 666]])

    In [4]: np.eye((3,3))
    Out[4]:
    array([[ 1.,  0.,  0.],
           [ 0.,  1.,  0.],
           [ 0.,  0.,  1.]])
  #+END_SRC

* Création de tableau (suite)

- Générateurs aléatoires =rand/randint/randn=
  #+BEGIN_SRC python
    In [1]: np.random.rand(3)
    Out[1]: array([ 0.21401051,  0.19514481,  0.92647823])

    In [2]: np.random.randint(0, 10, 3)
    Out[2]: array([8, 8, 3])

    In [3]: np.random.randn(3)
    Out[3]: array([-0.4829445 , -1.05459848, -1.30539831])
  #+END_SRC

  #+BEAMER: \pause
  #+BEGIN_REMARK
  Un générateur aléatoire n'est par définition pas aléatoire dans une machine
  déterministe qu'est un ordinateur !
  #+BEGIN_SRC python
    In [1]: np.random.seed(1234)
  #+END_SRC
  #+END_REMARK

* Création de tableau : intermède graphique
** Python code
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC python
  In [1]: import numpy as np
  In [2]: import matplotlib.pyplot as plt
  In [3]: %matplotlib

  In [4]: img = np.random.randn(30, 30)
  In [5]: plt.imshow(img, cmap=plt.cm.hot,
                     extent=(0,30,0,30))
  In [6]: plt.colorbar()
#+END_SRC

** Color map
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+ATTR_LATEX: :width 1.2\linewidth
[[file:figures/cmap.pdf]]

* Parcours par indice

#+ATTR_BEAMER: :overlay +-
- L'utilisation de l'opérateur =[]= est similaire à celle des listes
  #+BEGIN_SRC python
    In [1]: x = np.random.randint(10, size=5)
    In [2]: x
    Out[2]: array([8, 0, 1, 6, 0])

    In [3]: x[0], x[3], x[-1]
    Out[3]: (8, 6, 0)
  #+END_SRC

- Pour les tableaux à $n$ dimensions
  #+BEGIN_SRC python
    In [1]: x = np.random.randint(10, size=(3, 4))
    In [2]: x
    Out[2]:
    array([[8, 3, 6, 4],
           [9, 8, 2, 0],
           [0, 5, 5, 4]])

    In [3]: x[0, 0], x[2, 0], x[2, -1]
    Out[3]: (8, 0, 4)
  #+END_SRC

* Parcours par indice

- Comme pour les listes qui sont des objets /mutables/, il est possible d'assigner
  une valeur en spécifiant l'indice
  #+BEGIN_SRC python
    In [4]: x[0, 0] = 12
    In [5]: x
    Out[5]:
    array([[12, 3, 6, 4],
           [ 9, 8, 2, 0],
           [ 0, 5, 5, 4]])
  #+END_SRC

#+BEAMER: \pause
#+BEGIN_REMARK
Le type de données numériques stockées est fixé à la création du tableau
#+BEGIN_SRC python
  In [6]: x[0, 0] = 3.1415
  In [7]: x
  Out[7]:
  array([[3, 3, 6, 4],
         [9, 8, 2, 0],
         [0, 5, 5, 4]])
#+END_SRC
#+END_REMARK

* Sélection par indice

- Comme pour les listes, il est possible d'utiliser la syntaxe =[start:stop:step]=
  pour sélectionner un sous espace vectoriel
  #+BEGIN_SRC python
    In [1]: x
    Out[1]:
    array([[3, 3, 6, 4],
           [9, 8, 2, 0],
           [0, 5, 5, 4]])
  #+END_SRC
  #+ATTR_BEAMER: :overlay +-
  - Sélection d'une ligne
    #+BEGIN_SRC python
      In [2]: x[0]
      Out[2]: array([[3, 3, 6, 4])
    #+END_SRC

  - *Sélection d'une colonne*
    #+BEGIN_SRC python
      In [2]: x[:, 0], x[:, 1]
      Out[2]: (array([3, 9, 0]), array([3, 8, 5]))
    #+END_SRC

* Sélection par indice

- À la différence des listes, les sous espaces vectoriels sélectionnés ne sont
  pas des copies mais *une vue réduite* de la matrice globale

- Toute modification opérée sur le sous espace vectoriel est reportée dans la
  matrice globale

  #+BEAMER: \pause
  #+BEGIN_SRC python
    In [1]: x
    Out[1]:
    array([[3, 3, 6, 4],
           [9, 8, 2, 0],
           [0, 5, 5, 4]])

    In [2]: xx = x[:2, :2]
    In [3]: xx
    Out[3]:
    array([[3, 3],
           [9, 8]])

    In [4]: xx[0, 0] = 0
    In [5]: x
    Out[5]:
    array([[0, 3, 6, 4],
           [9, 8, 2, 0],
           [0, 5, 5, 4]])
  #+END_SRC

* Sélection par indice

- Pour réaliser une copie d'un sous espace vectoriel, on utilisera la méthode =copy()=
  #+BEGIN_SRC python
    In [2]: xx = x[:2, :2].copy()
    In [3]: xx
    Out[3]:
    array([[0, 3],
           [9, 8]])

    In [4]: xx[0, 0] = 666
    In [5]: x
    Out[5]:
    array([[0, 3, 6, 4],
           [9, 8, 2, 0],
           [0, 5, 5, 4]])
  #+END_SRC

* Opérations mathématiques

- *Grâce à l'homogénéité des tableaux de =numpy=*, il est possible de réaliser des
  opérations mathématiques \neq listes Python
  #+BEGIN_SRC python
    In [1]: l = [1, 2, 3, 4]
    In [2]: l+5
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-53-1cb32c2d071d> in <module>()
    ----> 1 l+5

    TypeError: can only concatenate list (not "int") to list
  #+END_SRC

* Opérations mathématiques

- *Grâce à l'homogénéité des tableaux de =numpy=*, il est possible de réaliser des
  opérations mathématiques

- Opérateurs binaires
  #+BEGIN_SRC python
    In [1]: x = np.arange(4)
    In [2]: x
    Out[2]: array([0, 1, 2, 3])

    In [3]: x+5
    Out[3]: array([5, 6, 7, 8])

    In [4]: x-5
    Out[4]: array([-5, -4, -3, -2])

    In [5]: x*5
    Out[5]: array([ 0,  5, 10, 15])

    In [5]: x/5
    Out[5]: array([ 0. ,  0.2,  0.4,  0.6]))
  #+END_SRC

* Opérations mathématiques

- *Grâce à l'homogénéité des tableaux de =numpy=*, il est possible de réaliser des
  opérations mathématiques

- Opérateurs unaires
  #+BEGIN_SRC python
    In [1]: x = np.arange(4)

    In [2]: -x
    Out[2]: array([0, -1, -2, -3])

    In [3]: x**2
    Out[3]: array([0, 1, 4, 9])

    In [4]: x%2
    Out[4]: array([0, 1, 0, 1])
  #+END_SRC

* Opérations mathématiques

#+ATTR_BEAMER: :overlay +-
- En plus des opérateurs usuels, =numpy= fournit un ensemble de *fonctions dites
  universelles* (ou /ufuncs/) opérant sur des tableaux

- Fonctions trigonométriques
  #+BEGIN_SRC python
    In [1]: theta = np.linspace(0, np.pi, 3)

    In [2]: np.cos(theta)
    Out[2]: array([  1.00000000e+00,   6.12323400e-17,  -1.00000000e+00])

    In [3]: np.sin(theta)
    Out[3]: array([  0.00000000e+00,   1.00000000e+00,   1.22464680e-16])

    In [4]: np.tan(theta)
    Out[4]: array([  0.00000000e+00,   1.63312394e+16,  -1.22464680e-16])
  #+END_SRC

- Autres fonctions : =np.exp(), np.power(), np.log(), np.log10(),...=

* Opérations statistiques

#+ATTR_BEAMER: :overlay +-
- Somme des éléments d'un tableau
  #+BEGIN_SRC python
    In [1]: x = np.random.rand(100)

    In [2]: sum(x)
    Out[2]: 50.394482884150314

    In [3]: np.sum(x)
    Out[3]: 50.394482884150314
  #+END_SRC

- Toutefois, la formulation =np.sum()= propre à =numpy= présente l'avantage d'être
  nettement plus rapide (code compilé) en plus d'être plus générale
  #+BEGIN_SRC python
    In [4]: big_array = np.random.rand(1000000)

    In [5]: %timeit sum(big_array)
    10 loops, best of 3: 82.9 ms per loop

    In [6]: %timeit np.sum(big_array)
    1000 loops, best of 3: 467 µs per loop
  #+END_SRC

* Opérations statistiques

#+ATTR_BEAMER: :overlay +-
- Somme des éléments d'un tableau : méthode =sum=
  #+BEGIN_SRC python
    In [1]: M = np.random.randint(10, (3, 4))
    In [2]: M
    Out[2]:
    array([[7, 0, 8, 4],
           [4, 7, 0, 5],
           [7, 0, 7, 6]])

    In [3]: np.sum(M), M.sum()
    Out[3]: (55, 55)
  #+END_SRC

- Somme colonne par colonne
  #+BEGIN_SRC python
    In [4]: M.sum(axis=0)
    Out[4]: array([18,  7, 15, 15])
  #+END_SRC

- Somme ligne par ligne
  #+BEGIN_SRC python
    In [5]: M.sum(axis=1)
    Out[5]: array([19, 16, 20])
  #+END_SRC

* Opérations statistiques

|---------------+-------------------------------------------|
| Fonction      | Description                               |
| =np.sum=        | Somme des éléments                        |
| =np.prod=       | Produit des éléments                      |
| =np.mean=       | Valeur moyenne                            |
| =np.std=        | Standard déviation                        |
| =np.var=        | Variance                                  |
| =np.min=        | Valeur minimale                           |
| =np.max=        | Valeur maximale                           |
| =np.argmin=     | Indice de la valeur minimale              |
| =np.argmax=     | Indice de la valeur maximale              |
| =np.median=     | Valeur médiane                            |
| =np.percentile= | Quantiles                                 |
|---------------+-------------------------------------------|

* Opérations algébriques

- Multiplication de matrices
  #+BEGIN_SRC python
    In [1]: M = np.ones(shape=(3,3))
    In [2]: M
    Out[2]:
    array([[ 1.,  1.,  1.],
           [ 1.,  1.,  1.],
           [ 1.,  1.,  1.]])

    In [3]: M*M
    Out[3]:
    array([[ 1.,  1.,  1.],
           [ 1.,  1.,  1.],
           [ 1.,  1.,  1.]])

    In [4]: M.dot(M)
    Out[4]:
    array([[ 3.,  3.,  3.],
           [ 3.,  3.,  3.],
           [ 3.,  3.,  3.]])
  #+END_SRC

* Opérations algébriques

- Transposition de matrices
  #+BEGIN_SRC python
    In [1]: M = np.random.randint(5, size=(3,3))
    In [2]: M
    Out[2]:
    array([[4, 1, 0],
           [2, 3, 0],
           [1, 0, 2]])

    In [3]: M.transpose()
    Out[3]:
    array([[4, 2, 1],
           [1, 3, 0],
           [0, 0, 2]])
  #+END_SRC

* Opérations algébriques

- Conversion d'un vecteur vers une matrice
  #+BEGIN_SRC python
    In [1]: v = np.arange(4)
    In [2]: v
    Out[2]: array([0, 1, 2, 3])

    In [3]: v[:, np.newaxis]
    Out[3]:
    array([[0],
           [1],
           [2],
           [3]])

    In [4]: v.reshape(4, 1)
    Out[4]:
    array([[0],
           [1],
           [2],
           [3]])
  #+END_SRC

* Opérations algébriques : intermède graphique

#+BEGIN_SRC latex
  \begin{align*}
    z = f(x,y) =& \sin^{10} x + \cos(x\cdot y)\cdot\cos x\\
    =&\sin^{10}\begin{bmatrix}
    x_0&\cdots
    \end{bmatrix}+\cos\left(\begin{bmatrix}
        x_0&\cdots
      \end{bmatrix}\cdot\begin{bmatrix}
    y_0\\\vdots\end{bmatrix}\right)\cdot\cos\begin{bmatrix}
        x_0&\cdots
      \end{bmatrix}
  \end{align*}
#+END_SRC

#+BEAMER: \vskip-20pt\pause

** Python code
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+BEGIN_SRC python
  In [1]: import numpy as np
  In [2]: import matplotlib.pyplot as plt
  In [3]: %matplotlib

  In [4]: x = np.linspace(0, 5, 500)
  In [5]: y = np.linspace(0, 5, 500)[:, np.newaxis]
  In [6]: z = np.sin(x)**10 + np.cos(x*y)*np.cos(x)
  In [7]: x.shape, y.shape, z.shape
  Out[7]: ((500,), (500, 1), (500, 500))

  In [8]: plt.imshow(z, extent=[0, 5, 0, 5],
                     cmap="viridis")
  In [9]: plt.colorbar();
#+END_SRC

** Color map
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+BEAMER: \visible<2>{
#+ATTR_LATEX: :width 1.1\linewidth
[[file:figures/zxy.pdf]]
#+BEAMER: }

* Opérations logiques

- En plus des opérateurs et fonctions mathématiques, =numpy= fournit également les
  opérateurs de comparaison opérant sur les éléments d'un tableau
  #+BEGIN_SRC python
    In [1]: x = np.array([1, 2, 3, 4, 5])

    In [2]: x < 3
    Out[2]: array([ True,  True, False, False, False], dtype=bool)

    In [3]: x == 3
    Out[3]: array([False, False,  True, False, False], dtype=bool)

    In [4]: (x * 2) == (x**2)
    Out[4]: array([False,  True, False, False, False], dtype=bool)
  #+END_SRC

* Opérations logiques

- =numpy= fournit également les méthodes =any= et =all=
  #+BEGIN_SRC python
    In [5]: np.any(x > 10)
    Out[5]: False

    In [6]: np.all(x < 10)
    Out[6]: True
  #+END_SRC

* Opérations logiques

- Il est finalement possible de dénombrer le nombre de valeurs d'un tableau
  satisfaisant à une ou des conditions
  #+BEGIN_SRC python
    In [7]: np.sum(x > 3)
    Out[7]: 2

    In [8]: np.sum((x > 3) & (x < 5))
    Out[8]: 1
  #+END_SRC

* Sélection par masque

- Les opérations de comparaison sur des tableaux retournent un tableau de
  booléens qui peut servir à la sélection d'éléments du tableau

  #+BEGIN_SRC python
    In [1]: x = np.random.randint(0, 10, 10)
    In [2]: x
    Out[2]: array([8, 9, 6, 2, 4, 5, 9, 4, 0, 7])

    In [3]: x < 5
    Out[3]: array([False, False, False,  True,  True, False, False,  True,  True, False], dtype=bool)

    In [4]: x[x < 5]
    Out[4]: array([2, 4, 4, 0])
  #+END_SRC

* Sélection par masque : intermède graphique
** Python code
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+BEGIN_SRC python
  In [1]: import numpy as np
  In [2]: import matplotlib.pyplot as plt
  In [3]: %matplotlib

  In [4]: x = np.random.rand(1000)
  In [5]: y = np.random.rand(1000)
  In [6]: plt.scatter(x, y, alpha=0.3)
  In [7]: plt.axis("scaled"); plt.axis([0, 1, 0, 1])

  In [8]: mask = (x*y > 0.5)
  In [9]: plt.scatter(x[mask], y[mask], alpha=0.6,
                      edgecolors="orange", c="none",
                      s=200)
#+END_SRC

** Mask
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+ATTR_LATEX: :width 1.1\linewidth
[[file:figures/mask.pdf]]

* Entrées/sorties de =numpy=

- =numpy= permet de charger un fichier texte dans un objet de type =ndarray=
  #+BEGIN_SRC python
    In [1]: cat /tmp/results.tsv
    # id        OPP    MQ1     MA
    21606456   9.90  12.32  16.00
    21402354  11.20  10.50  12.25

    In [2]: results = np.loadtxt("/tmp/results.tsv")
    In [3]: results
    Out[3]:
    array([[  2.16064560e+07,   9.90000000e+00,   1.23200000e+01,
              1.60000000e+01],
           [  2.14023540e+07,   1.12000000e+01,   1.05000000e+01,
              1.22500000e+01]])
  #+END_SRC

* Entrées/sorties de =numpy=

#+ATTR_BEAMER: :overlay +-
- =numpy= permet également de sauvegarder un tableau dans un fichier texte
  #+BEGIN_SRC python
    In [4]: np.savetxt("/tmp/results2.tsv", results)
  #+END_SRC

- le module [[http://pandas.pydata.org/][=pandas=]] est toutefois bien mieux adapté à la lecture de fichier
  contenant des données numériques

* Footnotes

[fn:e0eb780c73d6562] les principales fonctions de =numpy= sont implémentées en C
et en Fortran

[fn:ea2b86f523276c9] pour plus de détails, /cf./ [[http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.01-Understanding-Data-Types.ipynb#Understanding-Data-Types-in-Python][discussion]]

[fn:1c1516c060af0c15] pour plus de détails, /cf./ [[http://nbviewer.jupyter.org/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/02.05-Computation-on-arrays-broadcasting.ipynb#Computation-on-Arrays:-Broadcasting][discussion]]

* Annexes
:PROPERTIES:
:BEAMER_OPT: plain
:BEAMER_ENV: fullframe
:END:

#+BEAMER: \partpage

* Opérations algébriques : /Broadcasting/[fn:1c1516c060af0c15]

#+ATTR_LATEX: :width 0.7\linewidth
[[file:figures/broadcast.pdf]]
