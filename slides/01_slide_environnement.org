#+TITLE:  Interpréteurs & environnements de développement
#+AUTHOR: Xavier Garrido
#+DATE:   17/01/2021
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* COMMENT Environnements virtuels

- Un environnement virtuel permet d'avoir des installations de Python
  décorrélées les unes des autres et *isolées du système*
  - permet de travailler avec différentes versions de Python (version 2.X, 3.X)
  - permet de travailler avec différentes versions de modules (=matplotlib=,
    =numpy=,...)
  - *permet de nous affranchir des droits administrateurs*

* COMMENT Environnements virtuels

- Déclaration d'un environnement virtuel
  #+BEGIN_SRC shell-session
    @\prompt@ python3.5 -m venv ~/python.d/my_python_env

    @\prompt@ ls ~/python.d/my_python_env
    bin  include  lib  lib64  pip-selfcheck.json  pyvenv.cfg  share
  #+END_SRC

#+BEAMER: \pause

- Chargement de l'environnement virtuel
  #+BEGIN_SRC shell-session
    @\prompt@ source ~/python.d/my_python_env/bin/activate

    @\prompt@ which python
    ~/python.d/my_python_env/bin/python
  #+END_SRC

#+BEGIN_REMARK
La commande =source= doit être exécutée à chaque nouvelle session\nbsp!
#+END_REMARK

* COMMENT Gestionnaire de modules =pip=

- =pip= est *un système de gestion de paquets* utilisé pour installer et gérer des
  librairies écrites en Python
  - gestion des versions de modules/librairies (=matplotlib=, =numpy=, =django=, ...)
  - gestion & installation des dépendances

#+BEAMER: \pause

#+BEGIN_SRC latex
  \begin{center}
    \begin{tikzpicture}[
        grow=down,
        linet/.style={very thick,draw=gray!60,
          shorten >=0pt, shorten <=0pt, ->},
        punkt/.style={rectangle, rounded corners, shade, top color=white,
          bottom color=gray!10, draw=gray!60, very
          thick, text centered, text width=5em, text height=0.2cm}
      ]
      \ttfamily\color{gray}
      \path (0,0) node(a) [punkt] {matplotlib}
      (-2.5,+1.5) node(b) [punkt] {numpy}
      (+0.0,+1.5) node(c) [punkt] {dateutil}
      (+2.5,+1.5) node(d) [punkt] {...};
      \draw[linet] (a) -- (b);
      \draw[linet] (a) -- (c);
      \draw[linet] (a) -- (d);
    \end{tikzpicture}
  \end{center}
#+END_SRC

#+BEAMER: \pause

- Liste des libraries consultables sur le site [[https://pypi.python.org/pypi][/Python Package Index/]] (212 635 paquets)

* COMMENT Gestionnaire de modules =pip=

- Installation d'un module
  #+BEGIN_SRC shell-session
    @\prompt@ pip install matplotlib
  #+END_SRC

#+BEAMER: \pause

- Installation d'une version donnée d'un module
  #+BEGIN_SRC shell-session
    @\prompt@ pip install matplotlib==1.5.0
  #+END_SRC

#+BEAMER: \pause

- Suppression d'un module
  #+BEGIN_SRC shell-session
    @\prompt@ pip uninstall matplotlib
  #+END_SRC

#+BEAMER: \pause

- Mise à jour d'un module
  #+BEGIN_SRC shell-session
    @\prompt@ pip install matplotlib --upgrade
  #+END_SRC

* COMMENT Gestionnaire de modules =pip=

- Liste des modules installés
  #+BEGIN_SRC shell-session
    @\prompt@ pip freeze
  #+END_SRC

#+BEAMER: \pause

- Liste des modules pouvant être mis à jour
  #+BEGIN_SRC shell-session
    @\prompt@ pip list --outdated
  #+END_SRC

- Documentation de =pip= et de ses commandes [[https://pip.pypa.io][https://pip.pypa.io]]

* Interpréteurs =python=

- Contrairement à d'autres langages (C, fortran, ...), un programme =python= n'a pas à être compilé

- Interpréteur standard @@beamer:\onslide<2->{$\to$ utilisation limitée}@@
  #+BEGIN_SRC python
    @\prompt@ python3.7
    Python 3.7.3 (default, Mar 27 2019, 22:11:17)
    [GCC 7.3.0] :: Anaconda, Inc. on linux
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 2*2
    4
    >>> exit()
  #+END_SRC

#+BEAMER: \pause\pause

- Interpréteur intéractif =ipython=
  - *historique des commandes* \to touches \faArrowCircleUp\xspace et \faArrowCircleDown
  - *auto-complétion* \to touche =<TAB>=
  - édition en ligne du code
  - extraction automatique de *la documentation des fonctions* et objets =python=
  - interaction avec le shell du système d'exploitation
    
* Interpréteur =ipython=

# - Installation /via/ =pip=
#   #+BEGIN_SRC shell-session
#     @\prompt@ pip install ipython
#   #+END_SRC

- Utilisation de =ipython=
  #+BEGIN_SRC python
    @\prompt@ ipython
    Python 3.7.3 (default, Mar 27 2019, 22:11:17)
    Type 'copyright', 'credits' or 'license' for more information
    IPython 7.11.1 -- An enhanced Interactive Python. Type '?' for help.

    In [1]: 2*2
    Out[1]: 4
  #+END_SRC
  
* Interpréteur =ipython=

- Premier programme =python= : /"Hello world"/
  #+BEGIN_SRC python
    In [1]: print("Hello world")
    Hello world
  #+END_SRC

#+BEAMER: \pause

- Obtenir de l'aide /via/ l'opérateur =?=
  #+BEGIN_SRC python
    In [2]: print?
    Docstring:
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
    Type:      builtin_function_or_method
  #+END_SRC
* Interpréteur =ipython=

- Historique des commandes
  #+BEGIN_SRC python
    In [1]: x = 10

    In [2]: <UP>

    In [2]: x = 10
  #+END_SRC

#+BEAMER: \pause

- Auto-complétion
  #+BEGIN_SRC python
    In [1]: x = 10

    In [2]: x.<TAB>
    x.bit_length   x.denominator  x.imag         x.real
    x.conjugate    x.from_bytes   x.numerator    x.to_bytes
  #+END_SRC

* Interpréteur =ipython=

Fonctions internes à =ipython= : ces fonctions sont préfixées du caractère =%=

- =%whos= : afficher un résumé des variables déclarées
  #+BEGIN_SRC python
    In [1]: x = 10

    In [2]: %whos
    Variable   Type    Data/Info
    ----------------------------
    x          int     10
  #+END_SRC

- =%timeit= : évalue le temps moyen d'exécution d'un code
  #+BEGIN_SRC python
    In [1]: %timeit x = 10
    10000000 loops, best of 3: 13.7 ns per loop
  #+END_SRC

* COMMENT Interpréteur =ipython=

Fonctions internes à =ipython= : ces fonctions sont préfixées du caractère =%=

- =%history= : affiche l'historique des commandes tapées depuis la session courante de =ipython=
  #+BEGIN_SRC python
    In [1]: x = 10

    In [2]: %history
    x = 10
    %history
  #+END_SRC

  La commande =%history -g= vous retournera l'ensemble des commandes saisies depuis la toute première
  session =ipython=.

* COMMENT Interpréteur =ipython=

=ipython= fournit enfin des alias vers les commandes unix standards

#+BEGIN_SRC python
  In [1]: alias
  Total number of aliases: 16
  Out[1]:
  [('cat', 'cat'),
   ('clear', 'clear'),
   ('cp', 'cp'),
   ('ldir', 'ls -F -o --color %l | grep /$'),
   ('less', 'less'),
   ('lf', 'ls -F -o --color %l | grep ^-'),
   ('lk', 'ls -F -o --color %l | grep ^l'),
   ('ll', 'ls -F -o --color'),
   ('ls', 'ls -F --color'),
   ('lx', 'ls -F -o --color %l | grep ^-..x'),
   ('man', 'man'),
   ('mkdir', 'mkdir'),
   ('more', 'more'),
   ('mv', 'mv'),
   ('rm', 'rm'),
   ('rmdir', 'rmdir')]
#+END_SRC

* Comment et où écrire un programme =python= ?

1) Directement dans l'interpréteur =ipython=
  - @@beamer:\color{green!75!black}\faThumbsUp@@ :: @@beamer:\color{green!75!black}@@ permet de tester en
    intéractif le code et sa validité
  - @@beamer:\color{violet}\faThumbsDown@@ :: @@beamer:\color{violet}@@ rend difficile la
    réutilisation et la modification du code

#+BEAMER: \pause

2) [@2] Dans un éditeur de texte (=emacs=, =vim=, =notepad++=) puis 
   #+BEGIN_SRC python
     @\prompt@ python mon_code.py
   #+END_SRC
    
   ou directement dans l'interpréteur =ipython= en faisant
   #+BEGIN_SRC python
     @\prompt@ ipython
 
    In [1]: %run mon_code.py
   #+END_SRC

* Comment et où écrire un programme =python= ?

3) [@3] Dans un environnement de développement intégré (/IDE/)
   - [[https://www.jetbrains.com/fr-fr/pycharm/][=pycharm=]], [[https://pyzo.org/][=pyzo=]], [[https://www.spyder-ide.org/][=spyder=]], ...
   - [[https://atom.io/][=atom=]], [[https://www.sublimetext.com/][=sublime text=]], ...

      # - @@beamer:\color{green}\faThumbsUp@@ :: @@beamer:\color{green}@@ interpréteur intégré,
      #   vérification de la syntaxe, complétion
      # - @@beamer:\color{red}\faThumbsDown@@ :: @@beamer:\color{red}@@ cohabitation avec des
      #   environnements virtuels

#+BEAMER: \pause

4) [@4] Dans un /notebook/ Jupyter \to *solution utilisée pour les TD*

* Jupyter et ses /notebooks/

- Les /notebooks/ Jupyter sont des "cahiers électroniques" qui, dans un même document, peuvent
  rassembler du *texte, des images, des formules mathématiques et du code informatique
  exécutable*. Ils sont manipulables interactivement dans *un navigateur web*.

#+BEAMER: \pause
- Initialement développés pour les langages Julia, Python et R, les /notebooks/ Jupyter, supportent
  près de 40 langages différents (dont le C++).

#+BEAMER: \pause
- Outil de plus en plus populaire notamment pour documenter et expliquer le fonctionnement d'un code
  (tutoriels, cours, rédaction d'articles...)

* Exemple d'un /notebook/

- *La cellule* est l'élément de base d'un notebook Jupyter. Elle peut contenir du texte formaté au
  format Markdown ou du code informatique qui pourra être exécuté.

[[file:figures/jupyter_example.png]]

* Installation & utilisation des /notebooks/

- Sous Linux, l'installation est relativement simple 
  #+BEGIN_SRC shell-session
    @\prompt@ pip install --user jupyterlab
    @\prompt@ jupyter lab
  #+END_SRC

- Sous Windows, Mac \to passer sous Linux ou utiliser [[https://docs.anaconda.com/anaconda/navigator/][=Anaconda=]]
* Installation & utilisation des notebooks

- Vous pouvez vous connecter sur les machines de l'université et initier une session Jupyter

  1) depuis votre ordinateur personnel[fn:382b9b24d416887]
     #+BEGIN_SRC shell-session
       @\prompt@ ssh -L 8891:localhost:8891 prenom.nom@tp-ssh1.dep-informatique.u-psud.fr
     #+END_SRC

  2) une fois la connection =ssh= établie
     #+BEGIN_SRC shell-session
       @\prompt@ jupyter lab --port 8891 --ip 127.0.0.1 --no-browser
     #+END_SRC
     puis ouvrir le lien dans un navigateur web 
* Footnotes

[fn:382b9b24d416887] si =tp-ssh1= ne semble pas accessible, vous pouvez essayer =tp-ssh2= ou =tp-ssh3=
