#+TITLE:  _=scipy=_ : librairie pour la programmation scientifique
#+AUTHOR: Xavier Garrido
#+DATE:   13/04/2017
#+OPTIONS: toc:nil ^:{} author:nil
#+STARTUP:     beamer
#+LATEX_CLASS: python-slide

* =scipy= ?

#+ATTR_BEAMER: :overlay +-
- Le module =scipy= vise à unifier et fédérer un ensemble de bibliothèques Python
  à usage scientifique

- =scipy= s'appuie sur =numpy= en utilisant les objets de type tableaux et fournit
  des algorithmes scientifiques optimisés :

  - Algèbre linéaire (résolution d'équations linéaires, valeurs/vecteur propres)
  - Fonctions spéciales (fonction de Bessel, loi de distribution,...)
  - Algorithmes d'interpolation, d'intégration et d'optimisation
  - Traitement du signal et des images (transformée de Fourier, convolution,...)

* Installation & importation de =scipy=

#+ATTR_BEAMER: :overlay +-
- Installation /via/ =pip=
  #+BEGIN_SRC shell-session
    @\prompt@ pip install scipy
  #+END_SRC

- Convention d'importation : l'ensemble des modules =scipy= peuvent être importés
  individuellement
  #+BEGIN_SRC python
    In [1]: import scipy.linalg as linalg
  #+END_SRC

* *=scipy.linalg=* : algèbre linéaire

- Le module =scipy.linalg= inclut diverses fonctions dont
  - les opérations matricielles (inversion de matrices, calcul de déterminant)
  - résolution d'équations linéaires $Ax=b$
  - recherche de valeurs/vecteurs propres
  - pivot de Gauss, décomposition en valeurs singulières, ...

#+BEAMER: \pause

#+BEGIN_SRC python
  In [1]: from scipy import linalg

  In [2]: A = np.random.rand(2, 2)
  In [3]: A
  Out[3]:
  array([[ 0.38005786,  0.06901768],
         [ 0.86144407,  0.03601743]])

  In [4]: linalg.det(A)
  Out[4]: -0.045766161972959955

  In [5]: linalg.inv(A)*linalg.det(A)
  Out[5]:
  array([[ 0.03601743, -0.06901768],
         [-0.86144407,  0.38005786]])
#+END_SRC

* *=scipy.linalg=* : algèbre linéaire

- Résolution d'équation linéaire $Ax=b$
  #+BEGIN_SRC python
    In [1]: from scipy import linalg

    In [2]: A = np.random.rand(3, 3)
    In [3]: b = np.random.rand(3)

    In [4]: x = linalg.solve(A, b)

    In [5]: x
    Out[5]: array([ 0.61826973,  0.09161294, -0.35492909])

    In [6]: np.dot(A, x) - b
    Out[6]: array([ 0.,  0.,  0.])
  #+END_SRC

* *=scipy.linalg=* : algèbre linéaire

- Recherche de valeurs/vecteur propres $Av_n=\lambda_nv_n$ où $v_n$ est le
  $n$^{ième} vecteur propre et $\lambda_n$ la $n$^{ième} valeur propre

  #+BEGIN_SRC python
    In [1]: from scipy import linalg

    In [2]: evals, evecs = linalg.eig(A)

    In [3]: evals
    Out[3]: array([ 1.89774095+0.j, -0.27128129+0.j,  0.34921006+0.j])

    In [4]: evecs
    Out[4]:
    array([[-0.52832832, -0.7845609 ,  0.06535214],
           [-0.49359384,  0.58672007, -0.51283945],
           [-0.69082147,  0.2005586 ,  0.85599345]])

    In [5]: n = 1
    In [6]: linalg.norm(np.dot(A, evecs[:,n]) - evals[n]*evecs[:,n])
    Out[6]: 5.8191634490868685e-16
  #+END_SRC

* *=scipy.special=* : fonctions spéciales

- Fonctions de Bessel :
  $x^2\frac{\text{d}^2y}{\text{d}x^2}+x\frac{\text{d}y}{\text{d}x}+(x^2-\alpha^2)y=0$

  - Fonctions de Bessel de première espèce $J_n$
  - Fonctions de Bessel de seconde espèce $Y_n$

** Python code
:PROPERTIES:
:BEAMER_COL: 0.55
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: from scipy.special import jn, yn

  In [2]: x = np.linspace(0, 10, 100)
  In [3]: for n in range(4):
     ...:     plt.plot(x, jn(n, x), label=r"$J_%d(x)$" % n)
  In [4]: plt.legend()
  #+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [5]: for n in range(4):
     ...:     plt.plot(x, yn(n, x), label=r"$Y_%d(x)$" % n)
  In [6]: plt.legend()
#+END_SRC

- Pour découvrir l'ensemble des [[https://docs.scipy.org/doc/scipy/reference/special.html][fonctions spéciales]] offertes par =scipy=

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [7]: from scipy import special
  In [8]: special?
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_jn.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_yn.pdf}
  \end{center}
#+END_SRC
* *=scipy.interpolate=* : interpolation numérique
** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def f(x):
     ...:     return np.sin(x)

  In [2]: n = np.arange(0, 10)
  In [3]: y_meas = f(n) + 0.1*np.random.randn(n.size)
#+END_SRC

#+BEAMER: \pause\pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: from scipy.interpolate import interp1d
  In [5]: linear_interpolation = interp1d(n, y_meas)
  In [6]: yinterp1 = linear_interpolation(np.linspace(0, 9, 100))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [7]: cubic_interpolation = interp1d(n, y_meas, kind="cubic")
  In [8]: yinterp2 = cubic_interpolation(np.linspace(0, 9, 100))
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_interpolation0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_interpolation1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_interpolation2.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/scipy_interpolation3.pdf}
  \end{center}
#+END_SRC
* *=scipy.integrate=* : intégration de fonctions

- L'intégration numérique de $\int_a^bf(x)\text{d}x$ peut se faire /via/ le module
  =scipy.integrate= :
  - *=quad=* calcule une intégrale simple
  - *=dblquad=* calcule une intégrale double
  - *=tplquad=* calcule une intégrale triple
  - *=nquad=* calcule une intégrale à $n$ dimensions

#+BEAMER: \pause

- Exemple $\int_{-\infty}^{+\infty}\exp(-x^2)\text{d}x = \sqrt\pi$
  #+BEGIN_SRC python
    In [1]: import scipy.integrate as integrate

    In [2]: val, abserr = integrate.quad(lambda x : np.exp(-x**2), -np.inf, +np.inf)
    In [3]: print("I =", val, "+/-", abserr)
    I = 1.7724538509055159 +/- 1.4202636780944923e-08
  #+END_SRC
* *=scipy.integrate=* : intégration de fonctions

- Exemple d'intégration avec passage de paramètre : $I(a,b)=\int_{0}^{1}(ax^2+b)\text{d}x$
  #+BEGIN_SRC python
    In [1]: import scipy.integrate as integrate

    In [2]: def integrand(x, a, b):
       ...:     return a*x**2+b
    In [3]: a = 2
    In [4]: b = 1
    In [5]: integrate.quad(integrand, 0, 1, args=(a, b))
    Out[7]: (1.6666666666666667, 1.8503717077085944e-14)
  #+END_SRC
* *=scipy.integrate=* : intégration de fonctions

- Exemple d'intégrale multiple
  #+BEGIN_SRC latex
    \begin{align*}
      I_n=\int_{x=0}^\infty\int_{t=1}^\infty\frac{e^{-xt}}{t^n}\text{d}t\text{d}x=\frac{1}{n}
    \end{align*}
  #+END_SRC

  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [1]: def I(n):
       ...:     from scipy.integrate import dblquad
       ...:     return dblquad(lambda t, x: np.exp(-x*t)/t**n, 0, np.inf, lambda t: 1, lambda t: np.inf)

    In [2]: I(4)[0], I(4)[0]-1/4
    Out[2]: (0.2500000000043577, 4.357680882804971e-12)

    In [3]: I(100)[0], I(100)[0]-1/100
    Out[3]: (0.010000000000118046, 1.1804619781674575e-13)
  #+END_SRC

  #+BEAMER: \pause\vskip-18pt
  #+ATTR_LATEX: :options fontsize=\scriptsize
  #+BEGIN_SRC python
    In [4]: def I(n):
       ...:     from scipy.integrate import nquad
       ...:     return nquad(lambda t, x: np.exp(-x*t)/t**n, [[1, np.inf], [0, np.inf]])
  #+END_SRC
* *=scipy.integrate=* : résolution d'équations différentielles ordinaires

#+ATTR_BEAMER: :overlay +-
- =scipy= fournit l'interface *=odeint=* pour résoudre les EDO en plus de l'interface =ode=, plus complète
  mais plus subtile

- Une équation différentielle ordinaire peut s'écrire sous la forme *$y'=f(y, t)$* où *$y = [y_1(t),
  y_2(t),\ldots, y_n(t)]$* et *$f$ est une fonction fournissant les dérivées des fonctions $y_i(t)$*

- La résolution /via/ la fonction =odeint= implique la connaissance de $f$ et des conditions initiales
  $y(0)$

  #+BEGIN_SRC python
    y_t = odeint(f, y_0, t)
  #+END_SRC

  où =t= est un vecteur =numpy= correspondant à l'échantillonnage (temps, position,...) et =y_t= contient,
  pour chaque échantillon =t=, une colonne pour chaque solution\nbsp$y_i(t)$
* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Double_pendulum}{Mouvement du double pendule}}

** Equations
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{align*}
    \dot{\theta}_1&=\frac{6}{m\ell^2}\times\frac{2p_{\theta_1}-3\cos(\theta_1-\theta_2)p_{\theta_2}}{16-9\cos^2(\theta_1-\theta_2)}\\
    \dot{\theta}_2&=\frac{6}{m\ell^2}\times\frac{8p_{\theta_2}-3\cos(\theta_1-\theta_2)p_{\theta_1}}{16-9\cos^2(\theta_1-\theta_2)}\\
    \dot{p}_{\theta_1}&=-\frac{1}{2}m\ell^2\left[\dot{\theta}_1\dot{\theta}_2\sin(\theta_1-\theta_2)+3\frac{g}{\ell}\sin\theta_1\right]\\
    \dot{p}_{\theta_2}&=-\frac{1}{2}m\ell^2\left[-\dot{\theta}_1\dot{\theta}_2\sin(\theta_1-\theta_2)+\frac{g}{\ell}\sin\theta_2\right]
  \end{align*}
#+END_SRC

où $p_{\theta_i}$ sont les impulsions des barycentres $(x_1, y_1)$ et $(x_2,
y_2)$.

On pose $y=[\theta_1,\theta_2,p_{\theta_1},p_{\theta_2}]$

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

[[file:figures/dbl_pendulum.pdf]]
* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Double_pendulum}{Mouvement du double pendule}}

#+BEAMER: \scriptsize
#+BEGIN_SRC latex
  \begin{align*}
    \dot{y}_1&=\frac{6}{m\ell^2}\times\frac{2y_3-3\cos(y_1-y_2)y_4}{16-9\cos^2(y_1-y_2)}\\
    \dot{y}_2&=\frac{6}{m\ell^2}\times\frac{8y_4-3\cos(y_1-y_2)y_3}{16-9\cos^2(y_1-y_2)}\\
    \dot{y}_3&=-\frac{1}{2}m\ell^2\left[\dot{y}_1\dot{y}_2\sin(y_1-y_2)+3\frac{g}{\ell}\sin y_1\right]\\
    \dot{y}_4&=-\frac{1}{2}m\ell^2\left[-\dot{y}_1\dot{y}_2\sin(y_1-y_2)+\frac{g}{\ell}\sin y_2\right]\\
  \end{align*}
#+END_SRC

#+BEAMER: \pause

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def dy(y, t):
     ...:     g, l, m = 9.82, 0.5, 0.1
     ...:     y1, y2, y3, y4 = y[0], y[1], y[2], y[3]
     ...:
     ...:     dy1 = 6.0/m/l**2*(2*y3 - 3*np.cos(y1-y2)*y4)/(16 - 9*np.cos(y1-y2)**2)
     ...:     dy2 = 6.0/m/l**2*(8*y4 - 3*np.cos(y1-y2)*y3)/(16 - 9*np.cos(y1-y2)**2)
     ...:     dy3 = -0.5*m*l**2*(+dy1*dy2*np.sin(y1-y2) + 3*(g/l)*np.sin(y1))
     ...:     dy4 = -0.5*m*l**2*(-dy1*dy2*np.sin(y1-y2) + 1*(g/l)*np.sin(y2))
     ...:
     ...:     return [dy1, dy2, dy3, dy4]
#+END_SRC

* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Double_pendulum}{Mouvement du double pendule}}

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: g, l, m = 9.82, 0.5, 0.1
  In [2]: def dy(y, t):
     ...:     y1, y2, y3, y4 = y[0], y[1], y[2], y[3]
     ...:
     ...:     dy1 = 6.0/m/l**2*(2*y3 - 3*np.cos(y1-y2)*y4)/(16 - 9*np.cos(y1-y2)**2)
     ...:     dy2 = 6.0/m/l**2*(8*y4 - 3*np.cos(y1-y2)*y3)/(16 - 9*np.cos(y1-y2)**2)
     ...:     dy3 = -0.5*m*l**2*(+dy1*dy2*np.sin(y1-y2) + 3*(g/l)*np.sin(y1))
     ...:     dy4 = -0.5*m*l**2*(-dy1*dy2*np.sin(y1-y2) + 1*(g/l)*np.sin(y2))
     ...:
     ...:     return [dy1, dy2, dy3, dy4]
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [3]: # Conditions initiales
  In [4]: y0 = [np.pi/4, np.pi/2, 0, 0]

  In [5]: # Échantillonnage du temps
  In [6]: t = np.linspace(0, 10, 250)

  In [7]: # Résolution des équations différentielles
  In [8]: from scipy.integrate import odeint
  In [9]: y = odeint(dy, y0, t)
#+END_SRC

* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Double_pendulum}{Mouvement du double pendule}}

** Python
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [10]: t1, t2 = y[:, 0], y[:, 1]
  In [11]: fig, ax = plt.subplots(2, 1, figsize=(5,7))
  In [12]: ax[0].plot(t, t1, label=r"$\theta_1$")
  In [13]: ax[0].plot(t, t2, label=r"$\theta_2$")
  In [14]: ax[0].set(xlabel=r"$t$ [s]",
                     ylabel=r"$\theta$ [rad]")
  In [15]: ax[0].legend()

  In [16]: x1, y1 = l*np.sin(t1), -l*np.cos(t1)
  In [17]: x2, y2 = x1 + l*np.sin(t2), y1 - l*np.cos(t2)
  In [18]: ax[1].plot(x1, y1, label=r"$(x_1, y_1)$")
  In [19]: ax[1].plot(x2, y2, label=r"$(x_2, y_2)$")
  In [20]: ax[1].set(xlabel=r"$x$", ylabel=r"$y$")
  In [21]: ax[1].legend()
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

[[file:figures/scipy_dbl_pendulum1.pdf]]
* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Double_pendulum}{Mouvement du double pendule}}

** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python -n
  fig = plt.figure()
  ax = fig.add_subplot(111, autoscale_on=False,
                       xlim=(-1, 1), ylim=(-1.2, 0.2))
  ax.grid()

  pendule, = ax.plot([], [], "ok-", lw=2)
  mvt1, = ax.plot([], [], c="C0")
  mvt2, = ax.plot([], [], c="C1")
  text = ax.text(0.05, 0.9, "", transform=ax.transAxes)

  def animate(i):
      thisx = [0, x1[i], x2[i]]
      thisy = [0, y1[i], y2[i]]

      pendule.set_data(thisx, thisy)
      mvt1.set_data(x1[:i], y1[:i])
      mvt2.set_data(x2[:i], y2[:i])
      text.set_text("temps = %.1f s" % (i*0.04))
      return pendule, mvt1, mvt2, text

  ani = animation.FuncAnimation(fig, animate, np.arange(1, len(y)),
                                interval=25, blit=True)
  ani.save("double_pendulum.mp4", fps=15)
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \animategraphics[autoplay,loop, width=\linewidth]{50}{pendulum/pendulum}{001}{249}
#+END_SRC
* *=scipy.integrate=* : résolution d'équations différentielles ordinaires
#+BEAMER: \framesubtitle{\href{http://en.wikipedia.org/wiki/Damping}{Oscillateur harmonique amorti}}

#+BEGIN_SRC latex
  \begin{align*}
    \frac{\text{d}^2x}{\text{d}t^2}+2\zeta\omega_0\frac{\text{d}x}{\text{d}t}+\omega_0^2x=0
  \end{align*}
#+END_SRC


** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+BEAMER: \scriptsize
- On pose $p = \frac{\text{d}x}{\text{d}t}$
  #+BEGIN_SRC latex
    \begin{align*}
      \frac{\text{d}p}{\text{d}t}&=-2\zeta\omega_0p-\omega_0^2x\\
      \frac{\text{d}x}{\text{d}t}&=p
    \end{align*}
  #+END_SRC

#+BEAMER: \pause

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def dy(y, t, zeta, w0):
     ...:     x, p = y[0], y[1]
     ...:
     ...:     dx = p
     ...:     dp = -2 * zeta * w0 * p - w0**2 * x
     ...:     return [dx, dp]
  In [2]: y0 = [1.0, 0.0]
  In [3]: t = np.linspace(0, 10, 1000)
  In [4]: w0 = 2*np.pi*1.0
  In [5]: from scipy.integrate import odeint
  In [6]: y1 = odeint(dy, y0, t, args=(0.0, w0))
  In [7]: y2 = odeint(dy, y0, t, args=(0.2, w0))
  In [8]: y3 = odeint(dy, y0, t, args=(1.0, w0))
  In [9]: y4 = odeint(dy, y0, t, args=(5.0, w0))
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_oha.pdf}
  \end{center}
#+END_SRC
* *=scipy.fftpack=* : transformations de Fourier
** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+BEAMER: \pause
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: from scipy.fftpack import fft, fftfreq

  In [2]: F = fft(y2[:, 0])
  In [3]: w = fftfreq(t.size, t[1]-t[0])
  In [4]: plt.plot(w, np.abs(F))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [5]: mask = w > 0
  In [6]: plt.plot(w[mask], np.abs(F[mask]))
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_fft0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_fft1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_fft2.pdf}
  \end{center}
#+END_SRC
* *=scipy.ndimage=* : traitement d'images
** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: import scipy.ndimage as ndimage

  In [2]: img = ndimage.imread("../data/puzo_patrick.png")
  In [3]: plt.imshow(img)
  In [4]: plt.axis("off")
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [5]: img_flou = ndimage.gaussian_filter(img, sigma=10)
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: fig, ax = plt.subplots(2,2)
  In [7]: ax[1, 0].imshow(img[:,:,0], cmap=plt.cm.Reds)
  In [8]: ax[0, 1].imshow(img[:,:,1], cmap=plt.cm.Greens)
  In [9]: ax[1, 1].imshow(img[:,:,2], cmap=plt.cm.Blues)
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_ndimage0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_ndimage1.pdf}
    %% \includegraphics<3>[width=1.1\linewidth]{figures/scipy_ndimage2.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_ndimage3.pdf}
  \end{center}
#+END_SRC

* *=scipy.optimize=* : recherche d'/extrema/ d'une fonction

- L'objectif de l'optimisation est de trouver les /minima/ (ou /maxima/) d'une
  fonction

- Domaine d'étude très actif en mathématiques/informatique notamment pour les
  problèmes multi-variables

** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def f(x):
     ...:     return 4*x**3 + (x-2)**2 + x**4
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [2]: from scipy.optimize import fmin
  In [3]: fmin(f, x0=-2)
  Optimization terminated successfully.
       Current function value: -3.506641
       Iterations: 15
       Function evaluations: 30
  Out[3]: array([-2.67294922])
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: fmin(f, x0=0)
  Optimization terminated successfully.
       Current function value: 2.804988
       Iterations: 23
       Function evaluations: 46
  Out[4]: array([ 0.469625])
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_min0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_min1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_min2.pdf}
  \end{center}
#+END_SRC
* *=scipy.optimize=* : recherche des racines d'une fonction

#+BEGIN_SRC latex
  \begin{align*}
    f(x_0) = tan(2\pi x_0) - \frac{1}{x_0} = 0
  \end{align*}
#+END_SRC

** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def f(x):
     ...:     return np.tan(2*np.pi*x) - 1/x
  In [2]: x = np.linspace(0, 3, 1000)
  In [3]: plt.plot(x, f(x))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: y[abs(y) > 50] = np.nan
  In [5]: plt.ylim(-5, +5)
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: from scipy.optimize import fsolve
  In [7]: fsolve(f, x0=0.1)
  Out[7]: array([ 0.21612385])
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [8]: fsolve(f, x0=np.arange(0.1, 3, 0.5))
  Out[8]:
  array([ 0.21612385,  0.6574377 ,  1.116265  ,
          1.58938086,  2.071577  ,  2.55928414])
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \vspace{-0.5cm}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_root0.pdf}
    %% \includegraphics<2>[width=1.1\linewidth]{figures/scipy_root1.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_root2.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_root3.pdf}
    \includegraphics<4>[width=1.1\linewidth]{figures/scipy_root4.pdf}
  \end{center}
#+END_SRC

* *=scipy.optimize=* : ajustement d'un modèle/fonction à des données

- L'ajustement consiste *à minimiser* une quantité caractérisant le niveau
  d'accord entre données expérimentales et modèle "théorique"

- Exemple de fonction à minimiser
  #+BEGIN_SRC latex
    \begin{align*}
      \chi^2(p_0,\ldots,p_n) = \sum_i^N \frac{\left(y_i^\text{data}-y^\text{model}(x_i|p_0,\ldots,p_n)\right)^2}{\sigma_{y_i^\text{data}}^2}
    \end{align*}
  #+END_SRC
  où $p_0,\ldots,p_n$ sont les $n$ paramètres du modèle.

* *=scipy.optimize=* : ajustement d'un modèle/fonction à des données

** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: def f(x, a, b, c):
     ...:     return a*np.exp(-b*x) + c

  In [2]: a, b, c = 2.5, 1.3, 0.5
  In [3]: xdata = np.linspace(0, 4, 25)
  In [4]: dy = 0.2
  In [5]: ydata = f(xdata, a, b, c) +  dy*np.random.randn(xdata.size)
#+END_SRC

#+BEAMER: \pause\pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: from scipy.optimize import curve_fit
  In [7]: popt, pcov = curve_fit(f, xdata, ydata,
                                 sigma=np.full_like(ydata, dy))
  In [8]: popt
  Out[8]: array([ 2.28680731,  1.21827861,  0.45424157])

  In [9]: x = np.linspace(0, 4, 100)
  In[10]: plt.plot(x, f(x, *popt))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [11]: pcov
  Out[11]:
  array([[ 0.01681475,  0.00513406, -0.00182363],
         [ 0.00513406,  0.0254771 ,  0.00788938],
         [-0.00182363,  0.00788938,  0.00433422]])
#+END_SRC

#+BEAMER: \pause\pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [12]: np.sqrt(np.diag(pcov))
  Out[12]: array([ 0.16549342,  0.190719  ,  0.09236422])
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \vspace{-0.5cm}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_fit0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_fit1.pdf}
    \includegraphics<3>[width=1.1\linewidth]{figures/scipy_fit2.pdf}
    \only<4>{
      \begin{align*}
      \left(
      \begin{array}{cccc}
        \sigma_{p_0}^2&\sigma_{p_0p_1}&\cdots&\sigma_{p_0p_n}\\
        \sigma_{p_1p_0}&\sigma_{p_1}^2&\cdots&\sigma_{p_1p_n}\\
        \vdots&\vdots&\ddots&\vdots\\
        \sigma_{p_np_0}&\cdots&\cdots&\sigma_{p_n}^2
      \end{array}
      \right)
      \end{align*}
    }
    \includegraphics<5-6>[width=\linewidth]{figures/scipy_fit3.pdf}
    \includegraphics<7>[width=1.1\linewidth]{figures/scipy_fit4.pdf}
  \end{center}
#+END_SRC
* *=scipy.stats=* : distributions, fonctions & tests statistiques

** Python
:PROPERTIES:
:BEAMER_COL: 0.6
:END:

#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [1]: from scipy import stats

  In [2]: normal = stats.norm()
  In [3]: ax[0].hist(normal.rvs(1000), bins=50)
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [4]: x = np.linspace(-5, 5, 100)
  In [5]: ax[1].plot(x, normal.pdf(x))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [6]: ax[2].plot(x, normal.cdf(x))
#+END_SRC

#+BEAMER: \pause\vskip-18pt
#+ATTR_LATEX: :options fontsize=\scriptsize
#+BEGIN_SRC python
  In [7]: normal.mean(), normal.std(), normal.var()
  Out[7]: (0.0, 1.0, 1.0)

  In [8]: t_statistic, p_value = stats.ttest_ind(normal.rvs(1000),
                                                 normal.rvs(1000))
  In [9]: t_statistic, p_value
  Out[9]: (0.026897392679505635, 0.97854425922146115)
#+END_SRC

** Figure
:PROPERTIES:
:BEAMER_COL: 0.5
:END:

#+BEGIN_SRC latex
  \begin{center}
    \includegraphics<1>[width=1.1\linewidth]{figures/scipy_norm0.pdf}
    \includegraphics<2>[width=1.1\linewidth]{figures/scipy_norm1.pdf}
    \includegraphics<3->[width=1.1\linewidth]{figures/scipy_norm2.pdf}
  \end{center}
#+END_SRC
